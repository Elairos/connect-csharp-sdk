/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Square.Connect.Client;
using Square.Connect.Api;
using Square.Connect.Model;

namespace Square.Connect.Test
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TransactionsApiTests
    {
        private TransactionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TransactionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TransactionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TransactionsApi
            //Assert.IsInstanceOfType(typeof(TransactionsApi), instance, "instance is a TransactionsApi");
        }

        
        /// <summary>
        /// Test CaptureTransaction
        /// </summary>
        [Test]
        public void CaptureTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //string transactionId = null;
            //var response = instance.CaptureTransaction(locationId, transactionId);
            //Assert.IsInstanceOf<CaptureTransactionResponse> (response, "response is CaptureTransactionResponse");
        }
        
        /// <summary>
        /// Test Charge
        /// </summary>
        [Test]
        public void ChargeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //ChargeRequest body = null;
            //var response = instance.Charge(locationId, body);
            //Assert.IsInstanceOf<ChargeResponse> (response, "response is ChargeResponse");
        }
        
        /// <summary>
        /// Test CreateRefund
        /// </summary>
        [Test]
        public void CreateRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //string transactionId = null;
            //CreateRefundRequest body = null;
            //var response = instance.CreateRefund(locationId, transactionId, body);
            //Assert.IsInstanceOf<CreateRefundResponse> (response, "response is CreateRefundResponse");
        }
        
        /// <summary>
        /// Test ListRefunds
        /// </summary>
        [Test]
        public void ListRefundsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //string beginTime = null;
            //string endTime = null;
            //string sortOrder = null;
            //string cursor = null;
            //var response = instance.ListRefunds(locationId, beginTime, endTime, sortOrder, cursor);
            //Assert.IsInstanceOf<ListRefundsResponse> (response, "response is ListRefundsResponse");
        }
        
        /// <summary>
        /// Test ListTransactions
        /// </summary>
        [Test]
        public void ListTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //string beginTime = null;
            //string endTime = null;
            //string sortOrder = null;
            //string cursor = null;
            //var response = instance.ListTransactions(locationId, beginTime, endTime, sortOrder, cursor);
            //Assert.IsInstanceOf<ListTransactionsResponse> (response, "response is ListTransactionsResponse");
        }
        
        /// <summary>
        /// Test RetrieveTransaction
        /// </summary>
        [Test]
        public void RetrieveTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //string transactionId = null;
            //var response = instance.RetrieveTransaction(locationId, transactionId);
            //Assert.IsInstanceOf<RetrieveTransactionResponse> (response, "response is RetrieveTransactionResponse");
        }
        
        /// <summary>
        /// Test VoidTransaction
        /// </summary>
        [Test]
        public void VoidTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //string transactionId = null;
            //var response = instance.VoidTransaction(locationId, transactionId);
            //Assert.IsInstanceOf<VoidTransactionResponse> (response, "response is VoidTransactionResponse");
        }
        
    }

}
