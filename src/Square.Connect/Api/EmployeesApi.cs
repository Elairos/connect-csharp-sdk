/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Square.Connect.Client;
using Square.Connect.Model;

namespace Square.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmployeesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates an employee for a business.
        /// </summary>
        /// <remarks>
        /// Creates an employee for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Employee</returns>
        V1Employee V1CreateEmployee (V1Employee body);

        /// <summary>
        /// Creates an employee for a business.
        /// </summary>
        /// <remarks>
        /// Creates an employee for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        ApiResponse<V1Employee> V1CreateEmployeeWithHttpInfo (V1Employee body);
        /// <summary>
        /// Creates an employee role you can then assign to employees.
        /// </summary>
        /// <remarks>
        /// Creates an employee role you can then assign to employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>V1EmployeeRole</returns>
        V1EmployeeRole V1CreateEmployeeRole (V1EmployeeRole employeeRole);

        /// <summary>
        /// Creates an employee role you can then assign to employees.
        /// </summary>
        /// <remarks>
        /// Creates an employee role you can then assign to employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        ApiResponse<V1EmployeeRole> V1CreateEmployeeRoleWithHttpInfo (V1EmployeeRole employeeRole);
        /// <summary>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </summary>
        /// <remarks>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Timecard</returns>
        V1Timecard V1CreateTimecard (V1Timecard body);

        /// <summary>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </summary>
        /// <remarks>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        ApiResponse<V1Timecard> V1CreateTimecardWithHttpInfo (V1Timecard body);
        /// <summary>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </summary>
        /// <remarks>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Object</returns>
        Object V1DeleteTimecard (string timecardId);

        /// <summary>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </summary>
        /// <remarks>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1DeleteTimecardWithHttpInfo (string timecardId);
        /// <summary>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <remarks>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>List&lt;V1CashDrawerShift&gt;</returns>
        List<V1CashDrawerShift> V1ListCashDrawerShifts (string locationId, string order = null, string beginTime = null, string endTime = null);

        /// <summary>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <remarks>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1CashDrawerShift&gt;</returns>
        ApiResponse<List<V1CashDrawerShift>> V1ListCashDrawerShiftsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null);
        /// <summary>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1EmployeeRole&gt;</returns>
        List<V1EmployeeRole> V1ListEmployeeRoles (string order = null, int? limit = null, string cursor = null);

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1EmployeeRole&gt;</returns>
        ApiResponse<List<V1EmployeeRole>> V1ListEmployeeRolesWithHttpInfo (string order = null, int? limit = null, string cursor = null);
        /// <summary>
        /// Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <returns>List&lt;V1Employee&gt;</returns>
        List<V1Employee> V1ListEmployees (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null);

        /// <summary>
        /// Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Employee&gt;</returns>
        ApiResponse<List<V1Employee>> V1ListEmployeesWithHttpInfo (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null);
        /// <summary>
        /// Provides summary information for all events associated with a particular timecard.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all events associated with a particular timecard.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>List&lt;V1TimecardEvent&gt;</returns>
        List<V1TimecardEvent> V1ListTimecardEvents (string timecardId);

        /// <summary>
        /// Provides summary information for all events associated with a particular timecard.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all events associated with a particular timecard.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>ApiResponse of List&lt;V1TimecardEvent&gt;</returns>
        ApiResponse<List<V1TimecardEvent>> V1ListTimecardEventsWithHttpInfo (string timecardId);
        /// <summary>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Timecard&gt;</returns>
        List<V1Timecard> V1ListTimecards (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string cursor = null);

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Timecard&gt;</returns>
        ApiResponse<List<V1Timecard>> V1ListTimecardsWithHttpInfo (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string cursor = null);
        /// <summary>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>V1CashDrawerShift</returns>
        V1CashDrawerShift V1RetrieveCashDrawerShift (string locationId, string shiftId);

        /// <summary>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>ApiResponse of V1CashDrawerShift</returns>
        ApiResponse<V1CashDrawerShift> V1RetrieveCashDrawerShiftWithHttpInfo (string locationId, string shiftId);
        /// <summary>
        /// Provides the details for a single employee.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>V1Employee</returns>
        V1Employee V1RetrieveEmployee (string employeeId);

        /// <summary>
        /// Provides the details for a single employee.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        ApiResponse<V1Employee> V1RetrieveEmployeeWithHttpInfo (string employeeId);
        /// <summary>
        /// Provides the details for a single employee role.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>V1EmployeeRole</returns>
        V1EmployeeRole V1RetrieveEmployeeRole (string roleId);

        /// <summary>
        /// Provides the details for a single employee role.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        ApiResponse<V1EmployeeRole> V1RetrieveEmployeeRoleWithHttpInfo (string roleId);
        /// <summary>
        /// Provides the details for a single timecard.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single timecard.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>V1Timecard</returns>
        V1Timecard V1RetrieveTimecard (string timecardId);

        /// <summary>
        /// Provides the details for a single timecard.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single timecard.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        ApiResponse<V1Timecard> V1RetrieveTimecardWithHttpInfo (string timecardId);
        /// <summary>
        /// v1UpdateEmployee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Employee</returns>
        V1Employee V1UpdateEmployee (string employeeId, V1Employee body);

        /// <summary>
        /// v1UpdateEmployee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        ApiResponse<V1Employee> V1UpdateEmployeeWithHttpInfo (string employeeId, V1Employee body);
        /// <summary>
        /// Modifies the details of an employee role.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1EmployeeRole</returns>
        V1EmployeeRole V1UpdateEmployeeRole (string roleId, V1EmployeeRole body);

        /// <summary>
        /// Modifies the details of an employee role.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        ApiResponse<V1EmployeeRole> V1UpdateEmployeeRoleWithHttpInfo (string roleId, V1EmployeeRole body);
        /// <summary>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </summary>
        /// <remarks>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Timecard</returns>
        V1Timecard V1UpdateTimecard (string timecardId, V1Timecard body);

        /// <summary>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </summary>
        /// <remarks>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        ApiResponse<V1Timecard> V1UpdateTimecardWithHttpInfo (string timecardId, V1Timecard body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates an employee for a business.
        /// </summary>
        /// <remarks>
        /// Creates an employee for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Employee</returns>
        System.Threading.Tasks.Task<V1Employee> V1CreateEmployeeAsync (V1Employee body);

        /// <summary>
        /// Creates an employee for a business.
        /// </summary>
        /// <remarks>
        /// Creates an employee for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Employee>> V1CreateEmployeeAsyncWithHttpInfo (V1Employee body);
        /// <summary>
        /// Creates an employee role you can then assign to employees.
        /// </summary>
        /// <remarks>
        /// Creates an employee role you can then assign to employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        System.Threading.Tasks.Task<V1EmployeeRole> V1CreateEmployeeRoleAsync (V1EmployeeRole employeeRole);

        /// <summary>
        /// Creates an employee role you can then assign to employees.
        /// </summary>
        /// <remarks>
        /// Creates an employee role you can then assign to employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> V1CreateEmployeeRoleAsyncWithHttpInfo (V1EmployeeRole employeeRole);
        /// <summary>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </summary>
        /// <remarks>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Timecard</returns>
        System.Threading.Tasks.Task<V1Timecard> V1CreateTimecardAsync (V1Timecard body);

        /// <summary>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </summary>
        /// <remarks>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Timecard>> V1CreateTimecardAsyncWithHttpInfo (V1Timecard body);
        /// <summary>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </summary>
        /// <remarks>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1DeleteTimecardAsync (string timecardId);

        /// <summary>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </summary>
        /// <remarks>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1DeleteTimecardAsyncWithHttpInfo (string timecardId);
        /// <summary>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <remarks>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>Task of List&lt;V1CashDrawerShift&gt;</returns>
        System.Threading.Tasks.Task<List<V1CashDrawerShift>> V1ListCashDrawerShiftsAsync (string locationId, string order = null, string beginTime = null, string endTime = null);

        /// <summary>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <remarks>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1CashDrawerShift&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1CashDrawerShift>>> V1ListCashDrawerShiftsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null);
        /// <summary>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1EmployeeRole&gt;</returns>
        System.Threading.Tasks.Task<List<V1EmployeeRole>> V1ListEmployeeRolesAsync (string order = null, int? limit = null, string cursor = null);

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1EmployeeRole&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1EmployeeRole>>> V1ListEmployeeRolesAsyncWithHttpInfo (string order = null, int? limit = null, string cursor = null);
        /// <summary>
        /// Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <returns>Task of List&lt;V1Employee&gt;</returns>
        System.Threading.Tasks.Task<List<V1Employee>> V1ListEmployeesAsync (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null);

        /// <summary>
        /// Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Employee&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Employee>>> V1ListEmployeesAsyncWithHttpInfo (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null);
        /// <summary>
        /// Provides summary information for all events associated with a particular timecard.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all events associated with a particular timecard.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>Task of List&lt;V1TimecardEvent&gt;</returns>
        System.Threading.Tasks.Task<List<V1TimecardEvent>> V1ListTimecardEventsAsync (string timecardId);

        /// <summary>
        /// Provides summary information for all events associated with a particular timecard.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all events associated with a particular timecard.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1TimecardEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1TimecardEvent>>> V1ListTimecardEventsAsyncWithHttpInfo (string timecardId);
        /// <summary>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Timecard&gt;</returns>
        System.Threading.Tasks.Task<List<V1Timecard>> V1ListTimecardsAsync (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string cursor = null);

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Timecard&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Timecard>>> V1ListTimecardsAsyncWithHttpInfo (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string cursor = null);
        /// <summary>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>Task of V1CashDrawerShift</returns>
        System.Threading.Tasks.Task<V1CashDrawerShift> V1RetrieveCashDrawerShiftAsync (string locationId, string shiftId);

        /// <summary>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1CashDrawerShift)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1CashDrawerShift>> V1RetrieveCashDrawerShiftAsyncWithHttpInfo (string locationId, string shiftId);
        /// <summary>
        /// Provides the details for a single employee.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>Task of V1Employee</returns>
        System.Threading.Tasks.Task<V1Employee> V1RetrieveEmployeeAsync (string employeeId);

        /// <summary>
        /// Provides the details for a single employee.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Employee>> V1RetrieveEmployeeAsyncWithHttpInfo (string employeeId);
        /// <summary>
        /// Provides the details for a single employee role.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        System.Threading.Tasks.Task<V1EmployeeRole> V1RetrieveEmployeeRoleAsync (string roleId);

        /// <summary>
        /// Provides the details for a single employee role.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> V1RetrieveEmployeeRoleAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Provides the details for a single timecard.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single timecard.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>Task of V1Timecard</returns>
        System.Threading.Tasks.Task<V1Timecard> V1RetrieveTimecardAsync (string timecardId);

        /// <summary>
        /// Provides the details for a single timecard.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single timecard.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Timecard>> V1RetrieveTimecardAsyncWithHttpInfo (string timecardId);
        /// <summary>
        /// v1UpdateEmployee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Employee</returns>
        System.Threading.Tasks.Task<V1Employee> V1UpdateEmployeeAsync (string employeeId, V1Employee body);

        /// <summary>
        /// v1UpdateEmployee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Employee>> V1UpdateEmployeeAsyncWithHttpInfo (string employeeId, V1Employee body);
        /// <summary>
        /// Modifies the details of an employee role.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        System.Threading.Tasks.Task<V1EmployeeRole> V1UpdateEmployeeRoleAsync (string roleId, V1EmployeeRole body);

        /// <summary>
        /// Modifies the details of an employee role.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> V1UpdateEmployeeRoleAsyncWithHttpInfo (string roleId, V1EmployeeRole body);
        /// <summary>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </summary>
        /// <remarks>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Timecard</returns>
        System.Threading.Tasks.Task<V1Timecard> V1UpdateTimecardAsync (string timecardId, V1Timecard body);

        /// <summary>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </summary>
        /// <remarks>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Timecard>> V1UpdateTimecardAsyncWithHttpInfo (string timecardId, V1Timecard body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmployeesApi : IEmployeesApi
    {
        private Square.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmployeesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmployeesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Square.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates an employee for a business. Creates an employee for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Employee</returns>
        public V1Employee V1CreateEmployee (V1Employee body)
        {
             ApiResponse<V1Employee> localVarResponse = V1CreateEmployeeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an employee for a business. Creates an employee for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        public ApiResponse< V1Employee > V1CreateEmployeeWithHttpInfo (V1Employee body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1CreateEmployee");

            var localVarPath = "/v1/me/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// Creates an employee for a business. Creates an employee for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Employee</returns>
        public async System.Threading.Tasks.Task<V1Employee> V1CreateEmployeeAsync (V1Employee body)
        {
             ApiResponse<V1Employee> localVarResponse = await V1CreateEmployeeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an employee for a business. Creates an employee for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Employee>> V1CreateEmployeeAsyncWithHttpInfo (V1Employee body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1CreateEmployee");

            var localVarPath = "/v1/me/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// Creates an employee role you can then assign to employees. Creates an employee role you can then assign to employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>V1EmployeeRole</returns>
        public V1EmployeeRole V1CreateEmployeeRole (V1EmployeeRole employeeRole)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = V1CreateEmployeeRoleWithHttpInfo(employeeRole);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an employee role you can then assign to employees. Creates an employee role you can then assign to employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        public ApiResponse< V1EmployeeRole > V1CreateEmployeeRoleWithHttpInfo (V1EmployeeRole employeeRole)
        {
            // verify the required parameter 'employeeRole' is set
            if (employeeRole == null)
                throw new ApiException(400, "Missing required parameter 'employeeRole' when calling EmployeesApi->V1CreateEmployeeRole");

            var localVarPath = "/v1/me/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeRole != null && employeeRole.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(employeeRole); // http body (model) parameter
            }
            else
            {
                localVarPostBody = employeeRole; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// Creates an employee role you can then assign to employees. Creates an employee role you can then assign to employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        public async System.Threading.Tasks.Task<V1EmployeeRole> V1CreateEmployeeRoleAsync (V1EmployeeRole employeeRole)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = await V1CreateEmployeeRoleAsyncWithHttpInfo(employeeRole);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an employee role you can then assign to employees. Creates an employee role you can then assign to employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> V1CreateEmployeeRoleAsyncWithHttpInfo (V1EmployeeRole employeeRole)
        {
            // verify the required parameter 'employeeRole' is set
            if (employeeRole == null)
                throw new ApiException(400, "Missing required parameter 'employeeRole' when calling EmployeesApi->V1CreateEmployeeRole");

            var localVarPath = "/v1/me/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeRole != null && employeeRole.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(employeeRole); // http body (model) parameter
            }
            else
            {
                localVarPostBody = employeeRole; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift. Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Timecard</returns>
        public V1Timecard V1CreateTimecard (V1Timecard body)
        {
             ApiResponse<V1Timecard> localVarResponse = V1CreateTimecardWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift. Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        public ApiResponse< V1Timecard > V1CreateTimecardWithHttpInfo (V1Timecard body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1CreateTimecard");

            var localVarPath = "/v1/me/timecards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift. Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Timecard</returns>
        public async System.Threading.Tasks.Task<V1Timecard> V1CreateTimecardAsync (V1Timecard body)
        {
             ApiResponse<V1Timecard> localVarResponse = await V1CreateTimecardAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a timecard for an employee. Each timecard corresponds to a single shift. Creates a timecard for an employee. Each timecard corresponds to a single shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Timecard>> V1CreateTimecardAsyncWithHttpInfo (V1Timecard body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1CreateTimecard");

            var localVarPath = "/v1/me/timecards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information. Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Object</returns>
        public Object V1DeleteTimecard (string timecardId)
        {
             ApiResponse<Object> localVarResponse = V1DeleteTimecardWithHttpInfo(timecardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information. Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > V1DeleteTimecardWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling EmployeesApi->V1DeleteTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information. Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1DeleteTimecardAsync (string timecardId)
        {
             ApiResponse<Object> localVarResponse = await V1DeleteTimecardAsyncWithHttpInfo(timecardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information. Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1DeleteTimecardAsyncWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling EmployeesApi->V1DeleteTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days. Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>List&lt;V1CashDrawerShift&gt;</returns>
        public List<V1CashDrawerShift> V1ListCashDrawerShifts (string locationId, string order = null, string beginTime = null, string endTime = null)
        {
             ApiResponse<List<V1CashDrawerShift>> localVarResponse = V1ListCashDrawerShiftsWithHttpInfo(locationId, order, beginTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days. Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1CashDrawerShift&gt;</returns>
        public ApiResponse< List<V1CashDrawerShift> > V1ListCashDrawerShiftsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling EmployeesApi->V1ListCashDrawerShifts");

            var localVarPath = "/v1/{location_id}/cash-drawer-shifts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListCashDrawerShifts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1CashDrawerShift>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1CashDrawerShift>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1CashDrawerShift>)));
            
        }

        /// <summary>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days. Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>Task of List&lt;V1CashDrawerShift&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1CashDrawerShift>> V1ListCashDrawerShiftsAsync (string locationId, string order = null, string beginTime = null, string endTime = null)
        {
             ApiResponse<List<V1CashDrawerShift>> localVarResponse = await V1ListCashDrawerShiftsAsyncWithHttpInfo(locationId, order, beginTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days. Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1CashDrawerShift&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1CashDrawerShift>>> V1ListCashDrawerShiftsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling EmployeesApi->V1ListCashDrawerShifts");

            var localVarPath = "/v1/{location_id}/cash-drawer-shifts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListCashDrawerShifts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1CashDrawerShift>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1CashDrawerShift>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1CashDrawerShift>)));
            
        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee roles. Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1EmployeeRole&gt;</returns>
        public List<V1EmployeeRole> V1ListEmployeeRoles (string order = null, int? limit = null, string cursor = null)
        {
             ApiResponse<List<V1EmployeeRole>> localVarResponse = V1ListEmployeeRolesWithHttpInfo(order, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee roles. Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1EmployeeRole&gt;</returns>
        public ApiResponse< List<V1EmployeeRole> > V1ListEmployeeRolesWithHttpInfo (string order = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/v1/me/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListEmployeeRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1EmployeeRole>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1EmployeeRole>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1EmployeeRole>)));
            
        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee roles. Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1EmployeeRole&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1EmployeeRole>> V1ListEmployeeRolesAsync (string order = null, int? limit = null, string cursor = null)
        {
             ApiResponse<List<V1EmployeeRole>> localVarResponse = await V1ListEmployeeRolesAsyncWithHttpInfo(order, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee roles. Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1EmployeeRole&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1EmployeeRole>>> V1ListEmployeeRolesAsyncWithHttpInfo (string order = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/v1/me/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListEmployeeRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1EmployeeRole>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1EmployeeRole>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1EmployeeRole>)));
            
        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employees. Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <returns>List&lt;V1Employee&gt;</returns>
        public List<V1Employee> V1ListEmployees (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null)
        {
             ApiResponse<List<V1Employee>> localVarResponse = V1ListEmployeesWithHttpInfo(order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employees. Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Employee&gt;</returns>
        public ApiResponse< List<V1Employee> > V1ListEmployeesWithHttpInfo (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null)
        {

            var localVarPath = "/v1/me/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginUpdatedAt != null) localVarQueryParams.Add("begin_updated_at", Configuration.ApiClient.ParameterToString(beginUpdatedAt)); // query parameter
            if (endUpdatedAt != null) localVarQueryParams.Add("end_updated_at", Configuration.ApiClient.ParameterToString(endUpdatedAt)); // query parameter
            if (beginCreatedAt != null) localVarQueryParams.Add("begin_created_at", Configuration.ApiClient.ParameterToString(beginCreatedAt)); // query parameter
            if (endCreatedAt != null) localVarQueryParams.Add("end_created_at", Configuration.ApiClient.ParameterToString(endCreatedAt)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (externalId != null) localVarQueryParams.Add("external_id", Configuration.ApiClient.ParameterToString(externalId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Employee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Employee>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Employee>)));
            
        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employees. Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <returns>Task of List&lt;V1Employee&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Employee>> V1ListEmployeesAsync (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null)
        {
             ApiResponse<List<V1Employee>> localVarResponse = await V1ListEmployeesAsyncWithHttpInfo(order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employees. Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Employee&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Employee>>> V1ListEmployeesAsyncWithHttpInfo (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null)
        {

            var localVarPath = "/v1/me/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginUpdatedAt != null) localVarQueryParams.Add("begin_updated_at", Configuration.ApiClient.ParameterToString(beginUpdatedAt)); // query parameter
            if (endUpdatedAt != null) localVarQueryParams.Add("end_updated_at", Configuration.ApiClient.ParameterToString(endUpdatedAt)); // query parameter
            if (beginCreatedAt != null) localVarQueryParams.Add("begin_created_at", Configuration.ApiClient.ParameterToString(beginCreatedAt)); // query parameter
            if (endCreatedAt != null) localVarQueryParams.Add("end_created_at", Configuration.ApiClient.ParameterToString(endCreatedAt)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (externalId != null) localVarQueryParams.Add("external_id", Configuration.ApiClient.ParameterToString(externalId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Employee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Employee>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Employee>)));
            
        }

        /// <summary>
        /// Provides summary information for all events associated with a particular timecard. Provides summary information for all events associated with a particular timecard.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>List&lt;V1TimecardEvent&gt;</returns>
        public List<V1TimecardEvent> V1ListTimecardEvents (string timecardId)
        {
             ApiResponse<List<V1TimecardEvent>> localVarResponse = V1ListTimecardEventsWithHttpInfo(timecardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides summary information for all events associated with a particular timecard. Provides summary information for all events associated with a particular timecard.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>ApiResponse of List&lt;V1TimecardEvent&gt;</returns>
        public ApiResponse< List<V1TimecardEvent> > V1ListTimecardEventsWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling EmployeesApi->V1ListTimecardEvents");

            var localVarPath = "/v1/me/timecards/{timecard_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListTimecardEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1TimecardEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1TimecardEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1TimecardEvent>)));
            
        }

        /// <summary>
        /// Provides summary information for all events associated with a particular timecard. Provides summary information for all events associated with a particular timecard.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>Task of List&lt;V1TimecardEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1TimecardEvent>> V1ListTimecardEventsAsync (string timecardId)
        {
             ApiResponse<List<V1TimecardEvent>> localVarResponse = await V1ListTimecardEventsAsyncWithHttpInfo(timecardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides summary information for all events associated with a particular timecard. Provides summary information for all events associated with a particular timecard.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1TimecardEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1TimecardEvent>>> V1ListTimecardEventsAsyncWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling EmployeesApi->V1ListTimecardEvents");

            var localVarPath = "/v1/me/timecards/{timecard_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListTimecardEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1TimecardEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1TimecardEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1TimecardEvent>)));
            
        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee timecards. Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Timecard&gt;</returns>
        public List<V1Timecard> V1ListTimecards (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string cursor = null)
        {
             ApiResponse<List<V1Timecard>> localVarResponse = V1ListTimecardsWithHttpInfo(order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee timecards. Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Timecard&gt;</returns>
        public ApiResponse< List<V1Timecard> > V1ListTimecardsWithHttpInfo (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/v1/me/timecards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (employeeId != null) localVarQueryParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // query parameter
            if (beginClockinTime != null) localVarQueryParams.Add("begin_clockin_time", Configuration.ApiClient.ParameterToString(beginClockinTime)); // query parameter
            if (endClockinTime != null) localVarQueryParams.Add("end_clockin_time", Configuration.ApiClient.ParameterToString(endClockinTime)); // query parameter
            if (beginClockoutTime != null) localVarQueryParams.Add("begin_clockout_time", Configuration.ApiClient.ParameterToString(beginClockoutTime)); // query parameter
            if (endClockoutTime != null) localVarQueryParams.Add("end_clockout_time", Configuration.ApiClient.ParameterToString(endClockoutTime)); // query parameter
            if (beginUpdatedAt != null) localVarQueryParams.Add("begin_updated_at", Configuration.ApiClient.ParameterToString(beginUpdatedAt)); // query parameter
            if (endUpdatedAt != null) localVarQueryParams.Add("end_updated_at", Configuration.ApiClient.ParameterToString(endUpdatedAt)); // query parameter
            if (deleted != null) localVarQueryParams.Add("deleted", Configuration.ApiClient.ParameterToString(deleted)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Timecard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Timecard>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Timecard>)));
            
        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee timecards. Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Timecard&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Timecard>> V1ListTimecardsAsync (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string cursor = null)
        {
             ApiResponse<List<V1Timecard>> localVarResponse = await V1ListTimecardsAsyncWithHttpInfo(order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides summary information for all of a business&#39;s employee timecards. Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Timecard&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Timecard>>> V1ListTimecardsAsyncWithHttpInfo (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/v1/me/timecards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (employeeId != null) localVarQueryParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // query parameter
            if (beginClockinTime != null) localVarQueryParams.Add("begin_clockin_time", Configuration.ApiClient.ParameterToString(beginClockinTime)); // query parameter
            if (endClockinTime != null) localVarQueryParams.Add("end_clockin_time", Configuration.ApiClient.ParameterToString(endClockinTime)); // query parameter
            if (beginClockoutTime != null) localVarQueryParams.Add("begin_clockout_time", Configuration.ApiClient.ParameterToString(beginClockoutTime)); // query parameter
            if (endClockoutTime != null) localVarQueryParams.Add("end_clockout_time", Configuration.ApiClient.ParameterToString(endClockoutTime)); // query parameter
            if (beginUpdatedAt != null) localVarQueryParams.Add("begin_updated_at", Configuration.ApiClient.ParameterToString(beginUpdatedAt)); // query parameter
            if (endUpdatedAt != null) localVarQueryParams.Add("end_updated_at", Configuration.ApiClient.ParameterToString(endUpdatedAt)); // query parameter
            if (deleted != null) localVarQueryParams.Add("deleted", Configuration.ApiClient.ParameterToString(deleted)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Timecard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Timecard>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Timecard>)));
            
        }

        /// <summary>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift. Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>V1CashDrawerShift</returns>
        public V1CashDrawerShift V1RetrieveCashDrawerShift (string locationId, string shiftId)
        {
             ApiResponse<V1CashDrawerShift> localVarResponse = V1RetrieveCashDrawerShiftWithHttpInfo(locationId, shiftId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift. Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>ApiResponse of V1CashDrawerShift</returns>
        public ApiResponse< V1CashDrawerShift > V1RetrieveCashDrawerShiftWithHttpInfo (string locationId, string shiftId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling EmployeesApi->V1RetrieveCashDrawerShift");
            // verify the required parameter 'shiftId' is set
            if (shiftId == null)
                throw new ApiException(400, "Missing required parameter 'shiftId' when calling EmployeesApi->V1RetrieveCashDrawerShift");

            var localVarPath = "/v1/{location_id}/cash-drawer-shifts/{shift_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (shiftId != null) localVarPathParams.Add("shift_id", Configuration.ApiClient.ParameterToString(shiftId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveCashDrawerShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1CashDrawerShift>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1CashDrawerShift) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1CashDrawerShift)));
            
        }

        /// <summary>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift. Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>Task of V1CashDrawerShift</returns>
        public async System.Threading.Tasks.Task<V1CashDrawerShift> V1RetrieveCashDrawerShiftAsync (string locationId, string shiftId)
        {
             ApiResponse<V1CashDrawerShift> localVarResponse = await V1RetrieveCashDrawerShiftAsyncWithHttpInfo(locationId, shiftId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift. Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1CashDrawerShift)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1CashDrawerShift>> V1RetrieveCashDrawerShiftAsyncWithHttpInfo (string locationId, string shiftId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling EmployeesApi->V1RetrieveCashDrawerShift");
            // verify the required parameter 'shiftId' is set
            if (shiftId == null)
                throw new ApiException(400, "Missing required parameter 'shiftId' when calling EmployeesApi->V1RetrieveCashDrawerShift");

            var localVarPath = "/v1/{location_id}/cash-drawer-shifts/{shift_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (shiftId != null) localVarPathParams.Add("shift_id", Configuration.ApiClient.ParameterToString(shiftId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveCashDrawerShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1CashDrawerShift>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1CashDrawerShift) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1CashDrawerShift)));
            
        }

        /// <summary>
        /// Provides the details for a single employee. Provides the details for a single employee.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>V1Employee</returns>
        public V1Employee V1RetrieveEmployee (string employeeId)
        {
             ApiResponse<V1Employee> localVarResponse = V1RetrieveEmployeeWithHttpInfo(employeeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the details for a single employee. Provides the details for a single employee.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        public ApiResponse< V1Employee > V1RetrieveEmployeeWithHttpInfo (string employeeId)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling EmployeesApi->V1RetrieveEmployee");

            var localVarPath = "/v1/me/employees/{employee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// Provides the details for a single employee. Provides the details for a single employee.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>Task of V1Employee</returns>
        public async System.Threading.Tasks.Task<V1Employee> V1RetrieveEmployeeAsync (string employeeId)
        {
             ApiResponse<V1Employee> localVarResponse = await V1RetrieveEmployeeAsyncWithHttpInfo(employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides the details for a single employee. Provides the details for a single employee.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Employee>> V1RetrieveEmployeeAsyncWithHttpInfo (string employeeId)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling EmployeesApi->V1RetrieveEmployee");

            var localVarPath = "/v1/me/employees/{employee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// Provides the details for a single employee role. Provides the details for a single employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>V1EmployeeRole</returns>
        public V1EmployeeRole V1RetrieveEmployeeRole (string roleId)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = V1RetrieveEmployeeRoleWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the details for a single employee role. Provides the details for a single employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        public ApiResponse< V1EmployeeRole > V1RetrieveEmployeeRoleWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling EmployeesApi->V1RetrieveEmployeeRole");

            var localVarPath = "/v1/me/roles/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("role_id", Configuration.ApiClient.ParameterToString(roleId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// Provides the details for a single employee role. Provides the details for a single employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        public async System.Threading.Tasks.Task<V1EmployeeRole> V1RetrieveEmployeeRoleAsync (string roleId)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = await V1RetrieveEmployeeRoleAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides the details for a single employee role. Provides the details for a single employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> V1RetrieveEmployeeRoleAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling EmployeesApi->V1RetrieveEmployeeRole");

            var localVarPath = "/v1/me/roles/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("role_id", Configuration.ApiClient.ParameterToString(roleId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// Provides the details for a single timecard. Provides the details for a single timecard.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>V1Timecard</returns>
        public V1Timecard V1RetrieveTimecard (string timecardId)
        {
             ApiResponse<V1Timecard> localVarResponse = V1RetrieveTimecardWithHttpInfo(timecardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the details for a single timecard. Provides the details for a single timecard.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        public ApiResponse< V1Timecard > V1RetrieveTimecardWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling EmployeesApi->V1RetrieveTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// Provides the details for a single timecard. Provides the details for a single timecard.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>Task of V1Timecard</returns>
        public async System.Threading.Tasks.Task<V1Timecard> V1RetrieveTimecardAsync (string timecardId)
        {
             ApiResponse<V1Timecard> localVarResponse = await V1RetrieveTimecardAsyncWithHttpInfo(timecardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides the details for a single timecard. Provides the details for a single timecard.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Timecard>> V1RetrieveTimecardAsyncWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling EmployeesApi->V1RetrieveTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// v1UpdateEmployee 
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Employee</returns>
        public V1Employee V1UpdateEmployee (string employeeId, V1Employee body)
        {
             ApiResponse<V1Employee> localVarResponse = V1UpdateEmployeeWithHttpInfo(employeeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// v1UpdateEmployee 
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        public ApiResponse< V1Employee > V1UpdateEmployeeWithHttpInfo (string employeeId, V1Employee body)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling EmployeesApi->V1UpdateEmployee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1UpdateEmployee");

            var localVarPath = "/v1/me/employees/{employee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// v1UpdateEmployee 
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Employee</returns>
        public async System.Threading.Tasks.Task<V1Employee> V1UpdateEmployeeAsync (string employeeId, V1Employee body)
        {
             ApiResponse<V1Employee> localVarResponse = await V1UpdateEmployeeAsyncWithHttpInfo(employeeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// v1UpdateEmployee 
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Employee>> V1UpdateEmployeeAsyncWithHttpInfo (string employeeId, V1Employee body)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling EmployeesApi->V1UpdateEmployee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1UpdateEmployee");

            var localVarPath = "/v1/me/employees/{employee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// Modifies the details of an employee role. Modifies the details of an employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1EmployeeRole</returns>
        public V1EmployeeRole V1UpdateEmployeeRole (string roleId, V1EmployeeRole body)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = V1UpdateEmployeeRoleWithHttpInfo(roleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the details of an employee role. Modifies the details of an employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        public ApiResponse< V1EmployeeRole > V1UpdateEmployeeRoleWithHttpInfo (string roleId, V1EmployeeRole body)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling EmployeesApi->V1UpdateEmployeeRole");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1UpdateEmployeeRole");

            var localVarPath = "/v1/me/roles/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("role_id", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// Modifies the details of an employee role. Modifies the details of an employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        public async System.Threading.Tasks.Task<V1EmployeeRole> V1UpdateEmployeeRoleAsync (string roleId, V1EmployeeRole body)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = await V1UpdateEmployeeRoleAsyncWithHttpInfo(roleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the details of an employee role. Modifies the details of an employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> V1UpdateEmployeeRoleAsyncWithHttpInfo (string roleId, V1EmployeeRole body)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling EmployeesApi->V1UpdateEmployeeRole");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1UpdateEmployeeRole");

            var localVarPath = "/v1/me/roles/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("role_id", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint. Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Timecard</returns>
        public V1Timecard V1UpdateTimecard (string timecardId, V1Timecard body)
        {
             ApiResponse<V1Timecard> localVarResponse = V1UpdateTimecardWithHttpInfo(timecardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint. Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        public ApiResponse< V1Timecard > V1UpdateTimecardWithHttpInfo (string timecardId, V1Timecard body)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling EmployeesApi->V1UpdateTimecard");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1UpdateTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint. Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Timecard</returns>
        public async System.Threading.Tasks.Task<V1Timecard> V1UpdateTimecardAsync (string timecardId, V1Timecard body)
        {
             ApiResponse<V1Timecard> localVarResponse = await V1UpdateTimecardAsyncWithHttpInfo(timecardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint. Modifies a timecard&#39;s details. This creates an API_EDIT event for the timecard. You can view a timecard&#39;s event history with the List Timecard Events endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Timecard>> V1UpdateTimecardAsyncWithHttpInfo (string timecardId, V1Timecard body)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling EmployeesApi->V1UpdateTimecard");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmployeesApi->V1UpdateTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

    }
}
