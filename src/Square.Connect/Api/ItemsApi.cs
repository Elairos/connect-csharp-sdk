/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Square.Connect.Client;
using Square.Connect.Model;

namespace Square.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <remarks>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1InventoryEntry</returns>
        V1InventoryEntry V1AdjustInventory (string locationId, string variationId, V1AdjustInventoryRequest body);

        /// <summary>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <remarks>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1InventoryEntry</returns>
        ApiResponse<V1InventoryEntry> V1AdjustInventoryWithHttpInfo (string locationId, string variationId, V1AdjustInventoryRequest body);
        /// <summary>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <remarks>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>V1Item</returns>
        V1Item V1ApplyFee (string locationId, string itemId, string feeId);

        /// <summary>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <remarks>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> V1ApplyFeeWithHttpInfo (string locationId, string itemId, string feeId);
        /// <summary>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <remarks>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>V1Item</returns>
        V1Item V1ApplyModifierList (string locationId, string modifierListId, string itemId);

        /// <summary>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <remarks>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> V1ApplyModifierListWithHttpInfo (string locationId, string modifierListId, string itemId);
        /// <summary>
        /// Creates an item category.
        /// </summary>
        /// <remarks>
        /// Creates an item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Category</returns>
        V1Category V1CreateCategory (string locationId, V1Category body);

        /// <summary>
        /// Creates an item category.
        /// </summary>
        /// <remarks>
        /// Creates an item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Category</returns>
        ApiResponse<V1Category> V1CreateCategoryWithHttpInfo (string locationId, V1Category body);
        /// <summary>
        /// Creates a discount.
        /// </summary>
        /// <remarks>
        /// Creates a discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Discount</returns>
        V1Discount V1CreateDiscount (string locationId, V1Discount body);

        /// <summary>
        /// Creates a discount.
        /// </summary>
        /// <remarks>
        /// Creates a discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        ApiResponse<V1Discount> V1CreateDiscountWithHttpInfo (string locationId, V1Discount body);
        /// <summary>
        /// Creates a fee (tax).
        /// </summary>
        /// <remarks>
        /// Creates a fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Fee</returns>
        V1Fee V1CreateFee (string locationId, V1Fee body);

        /// <summary>
        /// Creates a fee (tax).
        /// </summary>
        /// <remarks>
        /// Creates a fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        ApiResponse<V1Fee> V1CreateFeeWithHttpInfo (string locationId, V1Fee body);
        /// <summary>
        /// Creates an item and at least one variation for it.
        /// </summary>
        /// <remarks>
        /// Creates an item and at least one variation for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Item</returns>
        V1Item V1CreateItem (string locationId, V1Item body);

        /// <summary>
        /// Creates an item and at least one variation for it.
        /// </summary>
        /// <remarks>
        /// Creates an item and at least one variation for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> V1CreateItemWithHttpInfo (string locationId, V1Item body);
        /// <summary>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <remarks>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierList</returns>
        V1ModifierList V1CreateModifierList (string locationId, V1ModifierList body);

        /// <summary>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <remarks>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        ApiResponse<V1ModifierList> V1CreateModifierListWithHttpInfo (string locationId, V1ModifierList body);
        /// <summary>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <remarks>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierOption</returns>
        V1ModifierOption V1CreateModifierOption (string locationId, string modifierListId, V1ModifierOption body);

        /// <summary>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <remarks>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        ApiResponse<V1ModifierOption> V1CreateModifierOptionWithHttpInfo (string locationId, string modifierListId, V1ModifierOption body);
        /// <summary>
        /// Creates a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Creates a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>
        V1Page V1CreatePage (string locationId, V1Page body);

        /// <summary>
        /// Creates a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Creates a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> V1CreatePageWithHttpInfo (string locationId, V1Page body);
        /// <summary>
        /// Creates an item variation for an existing item.
        /// </summary>
        /// <remarks>
        /// Creates an item variation for an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Variation</returns>
        V1Variation V1CreateVariation (string locationId, string itemId, V1Variation body);

        /// <summary>
        /// Creates an item variation for an existing item.
        /// </summary>
        /// <remarks>
        /// Creates an item variation for an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        ApiResponse<V1Variation> V1CreateVariationWithHttpInfo (string locationId, string itemId, V1Variation body);
        /// <summary>
        /// Deletes an existing item category.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>V1Category</returns>
        V1Category V1DeleteCategory (string locationId, string categoryId);

        /// <summary>
        /// Deletes an existing item category.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>ApiResponse of V1Category</returns>
        ApiResponse<V1Category> V1DeleteCategoryWithHttpInfo (string locationId, string categoryId);
        /// <summary>
        /// Deletes an existing discount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>V1Discount</returns>
        V1Discount V1DeleteDiscount (string locationId, string discountId);

        /// <summary>
        /// Deletes an existing discount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        ApiResponse<V1Discount> V1DeleteDiscountWithHttpInfo (string locationId, string discountId);
        /// <summary>
        /// Deletes an existing fee (tax).
        /// </summary>
        /// <remarks>
        /// Deletes an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>V1Fee</returns>
        V1Fee V1DeleteFee (string locationId, string feeId);

        /// <summary>
        /// Deletes an existing fee (tax).
        /// </summary>
        /// <remarks>
        /// Deletes an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        ApiResponse<V1Fee> V1DeleteFeeWithHttpInfo (string locationId, string feeId);
        /// <summary>
        /// Deletes an existing item and all item variations associated with it.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item and all item variations associated with it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>V1Item</returns>
        V1Item V1DeleteItem (string locationId, string itemId);

        /// <summary>
        /// Deletes an existing item and all item variations associated with it.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item and all item variations associated with it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> V1DeleteItemWithHttpInfo (string locationId, string itemId);
        /// <summary>
        /// Deletes an existing item modifier list and all modifier options associated with it.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier list and all modifier options associated with it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>V1ModifierList</returns>
        V1ModifierList V1DeleteModifierList (string locationId, string modifierListId);

        /// <summary>
        /// Deletes an existing item modifier list and all modifier options associated with it.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier list and all modifier options associated with it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        ApiResponse<V1ModifierList> V1DeleteModifierListWithHttpInfo (string locationId, string modifierListId);
        /// <summary>
        /// Deletes an existing item modifier option from a modifier list.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier option from a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>V1ModifierOption</returns>
        V1ModifierOption V1DeleteModifierOption (string locationId, string modifierListId, string modifierOptionId);

        /// <summary>
        /// Deletes an existing item modifier option from a modifier list.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier option from a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        ApiResponse<V1ModifierOption> V1DeleteModifierOptionWithHttpInfo (string locationId, string modifierListId, string modifierOptionId);
        /// <summary>
        /// Deletes an existing Favorites page and all of its cells.
        /// </summary>
        /// <remarks>
        /// Deletes an existing Favorites page and all of its cells.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>V1Page</returns>
        V1Page V1DeletePage (string locationId, string pageId);

        /// <summary>
        /// Deletes an existing Favorites page and all of its cells.
        /// </summary>
        /// <remarks>
        /// Deletes an existing Favorites page and all of its cells.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> V1DeletePageWithHttpInfo (string locationId, string pageId);
        /// <summary>
        /// Deletes a cell from a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Deletes a cell from a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>V1Page</returns>
        V1Page V1DeletePageCell (string locationId, string pageId, string row = null, string column = null);

        /// <summary>
        /// Deletes a cell from a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Deletes a cell from a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> V1DeletePageCellWithHttpInfo (string locationId, string pageId, string row = null, string column = null);
        /// <summary>
        /// Deletes an existing item variation from an item.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item variation from an item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>V1Variation</returns>
        V1Variation V1DeleteVariation (string locationId, string itemId, string variationId);

        /// <summary>
        /// Deletes an existing item variation from an item.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item variation from an item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        ApiResponse<V1Variation> V1DeleteVariationWithHttpInfo (string locationId, string itemId, string variationId);
        /// <summary>
        /// Lists all of a location&#39;s item categories.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s item categories.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>List&lt;V1Category&gt;</returns>
        List<V1Category> V1ListCategories (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s item categories.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s item categories.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>ApiResponse of List&lt;V1Category&gt;</returns>
        ApiResponse<List<V1Category>> V1ListCategoriesWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all of a location&#39;s discounts.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s discounts.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>List&lt;V1Discount&gt;</returns>
        List<V1Discount> V1ListDiscounts (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s discounts.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s discounts.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>ApiResponse of List&lt;V1Discount&gt;</returns>
        ApiResponse<List<V1Discount>> V1ListDiscountsWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s fees (taxes).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>List&lt;V1Fee&gt;</returns>
        List<V1Fee> V1ListFees (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s fees (taxes).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>ApiResponse of List&lt;V1Fee&gt;</returns>
        ApiResponse<List<V1Fee>> V1ListFeesWithHttpInfo (string locationId);
        /// <summary>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <remarks>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <returns>List&lt;V1InventoryEntry&gt;</returns>
        List<V1InventoryEntry> V1ListInventory (string locationId, int? limit = null);

        /// <summary>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <remarks>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1InventoryEntry&gt;</returns>
        ApiResponse<List<V1InventoryEntry>> V1ListInventoryWithHttpInfo (string locationId, int? limit = null);
        /// <summary>
        /// Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a location&#39;s items.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <returns>List&lt;V1Item&gt;</returns>
        List<V1Item> V1ListItems (string locationId);

        /// <summary>
        /// Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a location&#39;s items.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <returns>ApiResponse of List&lt;V1Item&gt;</returns>
        ApiResponse<List<V1Item>> V1ListItemsWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s modifier lists.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>List&lt;V1ModifierList&gt;</returns>
        List<V1ModifierList> V1ListModifierLists (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s modifier lists.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>ApiResponse of List&lt;V1ModifierList&gt;</returns>
        ApiResponse<List<V1ModifierList>> V1ListModifierListsWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>List&lt;V1Page&gt;</returns>
        List<V1Page> V1ListPages (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>ApiResponse of List&lt;V1Page&gt;</returns>
        ApiResponse<List<V1Page>> V1ListPagesWithHttpInfo (string locationId);
        /// <summary>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <remarks>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>V1Item</returns>
        V1Item V1RemoveFee (string locationId, string itemId, string feeId);

        /// <summary>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <remarks>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> V1RemoveFeeWithHttpInfo (string locationId, string itemId, string feeId);
        /// <summary>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <remarks>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>V1Item</returns>
        V1Item V1RemoveModifierList (string locationId, string modifierListId, string itemId);

        /// <summary>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <remarks>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> V1RemoveModifierListWithHttpInfo (string locationId, string modifierListId, string itemId);
        /// <summary>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>V1Item</returns>
        V1Item V1RetrieveItem (string locationId, string itemId);

        /// <summary>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> V1RetrieveItemWithHttpInfo (string locationId, string itemId);
        /// <summary>
        /// Provides the details for a single modifier list.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>V1ModifierList</returns>
        V1ModifierList V1RetrieveModifierList (string locationId, string modifierListId);

        /// <summary>
        /// Provides the details for a single modifier list.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        ApiResponse<V1ModifierList> V1RetrieveModifierListWithHttpInfo (string locationId, string modifierListId);
        /// <summary>
        /// Modifies the details of an existing item category.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Category</returns>
        V1Category V1UpdateCategory (string locationId, string categoryId, V1Category body);

        /// <summary>
        /// Modifies the details of an existing item category.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Category</returns>
        ApiResponse<V1Category> V1UpdateCategoryWithHttpInfo (string locationId, string categoryId, V1Category body);
        /// <summary>
        /// Modifies the details of an existing discount.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Discount</returns>
        V1Discount V1UpdateDiscount (string locationId, string discountId, V1Discount body);

        /// <summary>
        /// Modifies the details of an existing discount.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        ApiResponse<V1Discount> V1UpdateDiscountWithHttpInfo (string locationId, string discountId, V1Discount body);
        /// <summary>
        /// Modifies the details of an existing fee (tax).
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Fee</returns>
        V1Fee V1UpdateFee (string locationId, string feeId, V1Fee body);

        /// <summary>
        /// Modifies the details of an existing fee (tax).
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        ApiResponse<V1Fee> V1UpdateFeeWithHttpInfo (string locationId, string feeId, V1Fee body);
        /// <summary>
        /// Modifies the core details of an existing item.
        /// </summary>
        /// <remarks>
        /// Modifies the core details of an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Item</returns>
        V1Item V1UpdateItem (string locationId, string itemId, V1Item body);

        /// <summary>
        /// Modifies the core details of an existing item.
        /// </summary>
        /// <remarks>
        /// Modifies the core details of an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> V1UpdateItemWithHttpInfo (string locationId, string itemId, V1Item body);
        /// <summary>
        /// Modifies the details of an existing item modifier list.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierList</returns>
        V1ModifierList V1UpdateModifierList (string locationId, string modifierListId, V1UpdateModifierListRequest body);

        /// <summary>
        /// Modifies the details of an existing item modifier list.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        ApiResponse<V1ModifierList> V1UpdateModifierListWithHttpInfo (string locationId, string modifierListId, V1UpdateModifierListRequest body);
        /// <summary>
        /// Modifies the details of an existing item modifier option.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier option.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierOption</returns>
        V1ModifierOption V1UpdateModifierOption (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body);

        /// <summary>
        /// Modifies the details of an existing item modifier option.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier option.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        ApiResponse<V1ModifierOption> V1UpdateModifierOptionWithHttpInfo (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body);
        /// <summary>
        /// Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Modifies the details of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>
        V1Page V1UpdatePage (string locationId, string pageId, V1Page body);

        /// <summary>
        /// Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Modifies the details of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> V1UpdatePageWithHttpInfo (string locationId, string pageId, V1Page body);
        /// <summary>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>
        V1Page V1UpdatePageCell (string locationId, string pageId, V1PageCell body);

        /// <summary>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> V1UpdatePageCellWithHttpInfo (string locationId, string pageId, V1PageCell body);
        /// <summary>
        /// Modifies the details of an existing item variation.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item variation.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Variation</returns>
        V1Variation V1UpdateVariation (string locationId, string itemId, string variationId, V1Variation body);

        /// <summary>
        /// Modifies the details of an existing item variation.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item variation.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        ApiResponse<V1Variation> V1UpdateVariationWithHttpInfo (string locationId, string itemId, string variationId, V1Variation body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <remarks>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1InventoryEntry</returns>
        System.Threading.Tasks.Task<V1InventoryEntry> V1AdjustInventoryAsync (string locationId, string variationId, V1AdjustInventoryRequest body);

        /// <summary>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <remarks>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1InventoryEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1InventoryEntry>> V1AdjustInventoryAsyncWithHttpInfo (string locationId, string variationId, V1AdjustInventoryRequest body);
        /// <summary>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <remarks>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> V1ApplyFeeAsync (string locationId, string itemId, string feeId);

        /// <summary>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <remarks>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> V1ApplyFeeAsyncWithHttpInfo (string locationId, string itemId, string feeId);
        /// <summary>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <remarks>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> V1ApplyModifierListAsync (string locationId, string modifierListId, string itemId);

        /// <summary>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <remarks>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> V1ApplyModifierListAsyncWithHttpInfo (string locationId, string modifierListId, string itemId);
        /// <summary>
        /// Creates an item category.
        /// </summary>
        /// <remarks>
        /// Creates an item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Category</returns>
        System.Threading.Tasks.Task<V1Category> V1CreateCategoryAsync (string locationId, V1Category body);

        /// <summary>
        /// Creates an item category.
        /// </summary>
        /// <remarks>
        /// Creates an item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Category>> V1CreateCategoryAsyncWithHttpInfo (string locationId, V1Category body);
        /// <summary>
        /// Creates a discount.
        /// </summary>
        /// <remarks>
        /// Creates a discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Discount</returns>
        System.Threading.Tasks.Task<V1Discount> V1CreateDiscountAsync (string locationId, V1Discount body);

        /// <summary>
        /// Creates a discount.
        /// </summary>
        /// <remarks>
        /// Creates a discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Discount>> V1CreateDiscountAsyncWithHttpInfo (string locationId, V1Discount body);
        /// <summary>
        /// Creates a fee (tax).
        /// </summary>
        /// <remarks>
        /// Creates a fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Fee</returns>
        System.Threading.Tasks.Task<V1Fee> V1CreateFeeAsync (string locationId, V1Fee body);

        /// <summary>
        /// Creates a fee (tax).
        /// </summary>
        /// <remarks>
        /// Creates a fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Fee>> V1CreateFeeAsyncWithHttpInfo (string locationId, V1Fee body);
        /// <summary>
        /// Creates an item and at least one variation for it.
        /// </summary>
        /// <remarks>
        /// Creates an item and at least one variation for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> V1CreateItemAsync (string locationId, V1Item body);

        /// <summary>
        /// Creates an item and at least one variation for it.
        /// </summary>
        /// <remarks>
        /// Creates an item and at least one variation for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> V1CreateItemAsyncWithHttpInfo (string locationId, V1Item body);
        /// <summary>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <remarks>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierList</returns>
        System.Threading.Tasks.Task<V1ModifierList> V1CreateModifierListAsync (string locationId, V1ModifierList body);

        /// <summary>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <remarks>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> V1CreateModifierListAsyncWithHttpInfo (string locationId, V1ModifierList body);
        /// <summary>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <remarks>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierOption</returns>
        System.Threading.Tasks.Task<V1ModifierOption> V1CreateModifierOptionAsync (string locationId, string modifierListId, V1ModifierOption body);

        /// <summary>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <remarks>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> V1CreateModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, V1ModifierOption body);
        /// <summary>
        /// Creates a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Creates a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> V1CreatePageAsync (string locationId, V1Page body);

        /// <summary>
        /// Creates a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Creates a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> V1CreatePageAsyncWithHttpInfo (string locationId, V1Page body);
        /// <summary>
        /// Creates an item variation for an existing item.
        /// </summary>
        /// <remarks>
        /// Creates an item variation for an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Variation</returns>
        System.Threading.Tasks.Task<V1Variation> V1CreateVariationAsync (string locationId, string itemId, V1Variation body);

        /// <summary>
        /// Creates an item variation for an existing item.
        /// </summary>
        /// <remarks>
        /// Creates an item variation for an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Variation>> V1CreateVariationAsyncWithHttpInfo (string locationId, string itemId, V1Variation body);
        /// <summary>
        /// Deletes an existing item category.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>Task of V1Category</returns>
        System.Threading.Tasks.Task<V1Category> V1DeleteCategoryAsync (string locationId, string categoryId);

        /// <summary>
        /// Deletes an existing item category.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Category>> V1DeleteCategoryAsyncWithHttpInfo (string locationId, string categoryId);
        /// <summary>
        /// Deletes an existing discount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>Task of V1Discount</returns>
        System.Threading.Tasks.Task<V1Discount> V1DeleteDiscountAsync (string locationId, string discountId);

        /// <summary>
        /// Deletes an existing discount.
        /// </summary>
        /// <remarks>
        /// Deletes an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Discount>> V1DeleteDiscountAsyncWithHttpInfo (string locationId, string discountId);
        /// <summary>
        /// Deletes an existing fee (tax).
        /// </summary>
        /// <remarks>
        /// Deletes an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>Task of V1Fee</returns>
        System.Threading.Tasks.Task<V1Fee> V1DeleteFeeAsync (string locationId, string feeId);

        /// <summary>
        /// Deletes an existing fee (tax).
        /// </summary>
        /// <remarks>
        /// Deletes an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Fee>> V1DeleteFeeAsyncWithHttpInfo (string locationId, string feeId);
        /// <summary>
        /// Deletes an existing item and all item variations associated with it.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item and all item variations associated with it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> V1DeleteItemAsync (string locationId, string itemId);

        /// <summary>
        /// Deletes an existing item and all item variations associated with it.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item and all item variations associated with it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> V1DeleteItemAsyncWithHttpInfo (string locationId, string itemId);
        /// <summary>
        /// Deletes an existing item modifier list and all modifier options associated with it.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier list and all modifier options associated with it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>Task of V1ModifierList</returns>
        System.Threading.Tasks.Task<V1ModifierList> V1DeleteModifierListAsync (string locationId, string modifierListId);

        /// <summary>
        /// Deletes an existing item modifier list and all modifier options associated with it.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier list and all modifier options associated with it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> V1DeleteModifierListAsyncWithHttpInfo (string locationId, string modifierListId);
        /// <summary>
        /// Deletes an existing item modifier option from a modifier list.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier option from a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>Task of V1ModifierOption</returns>
        System.Threading.Tasks.Task<V1ModifierOption> V1DeleteModifierOptionAsync (string locationId, string modifierListId, string modifierOptionId);

        /// <summary>
        /// Deletes an existing item modifier option from a modifier list.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier option from a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> V1DeleteModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, string modifierOptionId);
        /// <summary>
        /// Deletes an existing Favorites page and all of its cells.
        /// </summary>
        /// <remarks>
        /// Deletes an existing Favorites page and all of its cells.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> V1DeletePageAsync (string locationId, string pageId);

        /// <summary>
        /// Deletes an existing Favorites page and all of its cells.
        /// </summary>
        /// <remarks>
        /// Deletes an existing Favorites page and all of its cells.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> V1DeletePageAsyncWithHttpInfo (string locationId, string pageId);
        /// <summary>
        /// Deletes a cell from a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Deletes a cell from a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> V1DeletePageCellAsync (string locationId, string pageId, string row = null, string column = null);

        /// <summary>
        /// Deletes a cell from a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Deletes a cell from a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> V1DeletePageCellAsyncWithHttpInfo (string locationId, string pageId, string row = null, string column = null);
        /// <summary>
        /// Deletes an existing item variation from an item.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item variation from an item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>Task of V1Variation</returns>
        System.Threading.Tasks.Task<V1Variation> V1DeleteVariationAsync (string locationId, string itemId, string variationId);

        /// <summary>
        /// Deletes an existing item variation from an item.
        /// </summary>
        /// <remarks>
        /// Deletes an existing item variation from an item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Variation>> V1DeleteVariationAsyncWithHttpInfo (string locationId, string itemId, string variationId);
        /// <summary>
        /// Lists all of a location&#39;s item categories.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s item categories.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of List&lt;V1Category&gt;</returns>
        System.Threading.Tasks.Task<List<V1Category>> V1ListCategoriesAsync (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s item categories.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s item categories.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Category&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Category>>> V1ListCategoriesAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all of a location&#39;s discounts.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s discounts.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of List&lt;V1Discount&gt;</returns>
        System.Threading.Tasks.Task<List<V1Discount>> V1ListDiscountsAsync (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s discounts.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s discounts.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Discount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Discount>>> V1ListDiscountsAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s fees (taxes).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>Task of List&lt;V1Fee&gt;</returns>
        System.Threading.Tasks.Task<List<V1Fee>> V1ListFeesAsync (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s fees (taxes).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Fee&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Fee>>> V1ListFeesAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <remarks>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <returns>Task of List&lt;V1InventoryEntry&gt;</returns>
        System.Threading.Tasks.Task<List<V1InventoryEntry>> V1ListInventoryAsync (string locationId, int? limit = null);

        /// <summary>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <remarks>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1InventoryEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1InventoryEntry>>> V1ListInventoryAsyncWithHttpInfo (string locationId, int? limit = null);
        /// <summary>
        /// Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a location&#39;s items.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <returns>Task of List&lt;V1Item&gt;</returns>
        System.Threading.Tasks.Task<List<V1Item>> V1ListItemsAsync (string locationId);

        /// <summary>
        /// Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a location&#39;s items.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Item&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Item>>> V1ListItemsAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s modifier lists.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>Task of List&lt;V1ModifierList&gt;</returns>
        System.Threading.Tasks.Task<List<V1ModifierList>> V1ListModifierListsAsync (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s modifier lists.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1ModifierList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1ModifierList>>> V1ListModifierListsAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>Task of List&lt;V1Page&gt;</returns>
        System.Threading.Tasks.Task<List<V1Page>> V1ListPagesAsync (string locationId);

        /// <summary>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Page&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Page>>> V1ListPagesAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <remarks>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> V1RemoveFeeAsync (string locationId, string itemId, string feeId);

        /// <summary>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <remarks>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> V1RemoveFeeAsyncWithHttpInfo (string locationId, string itemId, string feeId);
        /// <summary>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <remarks>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> V1RemoveModifierListAsync (string locationId, string modifierListId, string itemId);

        /// <summary>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <remarks>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> V1RemoveModifierListAsyncWithHttpInfo (string locationId, string modifierListId, string itemId);
        /// <summary>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> V1RetrieveItemAsync (string locationId, string itemId);

        /// <summary>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> V1RetrieveItemAsyncWithHttpInfo (string locationId, string itemId);
        /// <summary>
        /// Provides the details for a single modifier list.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>Task of V1ModifierList</returns>
        System.Threading.Tasks.Task<V1ModifierList> V1RetrieveModifierListAsync (string locationId, string modifierListId);

        /// <summary>
        /// Provides the details for a single modifier list.
        /// </summary>
        /// <remarks>
        /// Provides the details for a single modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> V1RetrieveModifierListAsyncWithHttpInfo (string locationId, string modifierListId);
        /// <summary>
        /// Modifies the details of an existing item category.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Category</returns>
        System.Threading.Tasks.Task<V1Category> V1UpdateCategoryAsync (string locationId, string categoryId, V1Category body);

        /// <summary>
        /// Modifies the details of an existing item category.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Category>> V1UpdateCategoryAsyncWithHttpInfo (string locationId, string categoryId, V1Category body);
        /// <summary>
        /// Modifies the details of an existing discount.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Discount</returns>
        System.Threading.Tasks.Task<V1Discount> V1UpdateDiscountAsync (string locationId, string discountId, V1Discount body);

        /// <summary>
        /// Modifies the details of an existing discount.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Discount>> V1UpdateDiscountAsyncWithHttpInfo (string locationId, string discountId, V1Discount body);
        /// <summary>
        /// Modifies the details of an existing fee (tax).
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Fee</returns>
        System.Threading.Tasks.Task<V1Fee> V1UpdateFeeAsync (string locationId, string feeId, V1Fee body);

        /// <summary>
        /// Modifies the details of an existing fee (tax).
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Fee>> V1UpdateFeeAsyncWithHttpInfo (string locationId, string feeId, V1Fee body);
        /// <summary>
        /// Modifies the core details of an existing item.
        /// </summary>
        /// <remarks>
        /// Modifies the core details of an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> V1UpdateItemAsync (string locationId, string itemId, V1Item body);

        /// <summary>
        /// Modifies the core details of an existing item.
        /// </summary>
        /// <remarks>
        /// Modifies the core details of an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> V1UpdateItemAsyncWithHttpInfo (string locationId, string itemId, V1Item body);
        /// <summary>
        /// Modifies the details of an existing item modifier list.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierList</returns>
        System.Threading.Tasks.Task<V1ModifierList> V1UpdateModifierListAsync (string locationId, string modifierListId, V1UpdateModifierListRequest body);

        /// <summary>
        /// Modifies the details of an existing item modifier list.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> V1UpdateModifierListAsyncWithHttpInfo (string locationId, string modifierListId, V1UpdateModifierListRequest body);
        /// <summary>
        /// Modifies the details of an existing item modifier option.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier option.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierOption</returns>
        System.Threading.Tasks.Task<V1ModifierOption> V1UpdateModifierOptionAsync (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body);

        /// <summary>
        /// Modifies the details of an existing item modifier option.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier option.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> V1UpdateModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body);
        /// <summary>
        /// Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Modifies the details of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> V1UpdatePageAsync (string locationId, string pageId, V1Page body);

        /// <summary>
        /// Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Modifies the details of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> V1UpdatePageAsyncWithHttpInfo (string locationId, string pageId, V1Page body);
        /// <summary>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> V1UpdatePageCellAsync (string locationId, string pageId, V1PageCell body);

        /// <summary>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <remarks>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> V1UpdatePageCellAsyncWithHttpInfo (string locationId, string pageId, V1PageCell body);
        /// <summary>
        /// Modifies the details of an existing item variation.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item variation.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Variation</returns>
        System.Threading.Tasks.Task<V1Variation> V1UpdateVariationAsync (string locationId, string itemId, string variationId, V1Variation body);

        /// <summary>
        /// Modifies the details of an existing item variation.
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item variation.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Variation>> V1UpdateVariationAsyncWithHttpInfo (string locationId, string itemId, string variationId, V1Variation body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemsApi : IItemsApi
    {
        private Square.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Square.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adjusts an item variation&#39;s current available inventory. Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1InventoryEntry</returns>
        public V1InventoryEntry V1AdjustInventory (string locationId, string variationId, V1AdjustInventoryRequest body)
        {
             ApiResponse<V1InventoryEntry> localVarResponse = V1AdjustInventoryWithHttpInfo(locationId, variationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adjusts an item variation&#39;s current available inventory. Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1InventoryEntry</returns>
        public ApiResponse< V1InventoryEntry > V1AdjustInventoryWithHttpInfo (string locationId, string variationId, V1AdjustInventoryRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1AdjustInventory");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->V1AdjustInventory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1AdjustInventory");

            var localVarPath = "/v1/{location_id}/inventory/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdjustInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1InventoryEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1InventoryEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1InventoryEntry)));
            
        }

        /// <summary>
        /// Adjusts an item variation&#39;s current available inventory. Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1InventoryEntry</returns>
        public async System.Threading.Tasks.Task<V1InventoryEntry> V1AdjustInventoryAsync (string locationId, string variationId, V1AdjustInventoryRequest body)
        {
             ApiResponse<V1InventoryEntry> localVarResponse = await V1AdjustInventoryAsyncWithHttpInfo(locationId, variationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adjusts an item variation&#39;s current available inventory. Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1InventoryEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1InventoryEntry>> V1AdjustInventoryAsyncWithHttpInfo (string locationId, string variationId, V1AdjustInventoryRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1AdjustInventory");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->V1AdjustInventory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1AdjustInventory");

            var localVarPath = "/v1/{location_id}/inventory/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdjustInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1InventoryEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1InventoryEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1InventoryEntry)));
            
        }

        /// <summary>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register. Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>V1Item</returns>
        public V1Item V1ApplyFee (string locationId, string itemId, string feeId)
        {
             ApiResponse<V1Item> localVarResponse = V1ApplyFeeWithHttpInfo(locationId, itemId, feeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register. Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > V1ApplyFeeWithHttpInfo (string locationId, string itemId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ApplyFee");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1ApplyFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling ItemsApi->V1ApplyFee");

            var localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApplyFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register. Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> V1ApplyFeeAsync (string locationId, string itemId, string feeId)
        {
             ApiResponse<V1Item> localVarResponse = await V1ApplyFeeAsyncWithHttpInfo(locationId, itemId, feeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register. Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> V1ApplyFeeAsyncWithHttpInfo (string locationId, string itemId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ApplyFee");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1ApplyFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling ItemsApi->V1ApplyFee");

            var localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApplyFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item. Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>V1Item</returns>
        public V1Item V1ApplyModifierList (string locationId, string modifierListId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = V1ApplyModifierListWithHttpInfo(locationId, modifierListId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item. Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > V1ApplyModifierListWithHttpInfo (string locationId, string modifierListId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ApplyModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1ApplyModifierList");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1ApplyModifierList");

            var localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApplyModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item. Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> V1ApplyModifierListAsync (string locationId, string modifierListId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = await V1ApplyModifierListAsyncWithHttpInfo(locationId, modifierListId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item. Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> V1ApplyModifierListAsyncWithHttpInfo (string locationId, string modifierListId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ApplyModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1ApplyModifierList");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1ApplyModifierList");

            var localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApplyModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Creates an item category. Creates an item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Category</returns>
        public V1Category V1CreateCategory (string locationId, V1Category body)
        {
             ApiResponse<V1Category> localVarResponse = V1CreateCategoryWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an item category. Creates an item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Category</returns>
        public ApiResponse< V1Category > V1CreateCategoryWithHttpInfo (string locationId, V1Category body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateCategory");

            var localVarPath = "/v1/{location_id}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// Creates an item category. Creates an item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Category</returns>
        public async System.Threading.Tasks.Task<V1Category> V1CreateCategoryAsync (string locationId, V1Category body)
        {
             ApiResponse<V1Category> localVarResponse = await V1CreateCategoryAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an item category. Creates an item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Category>> V1CreateCategoryAsyncWithHttpInfo (string locationId, V1Category body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateCategory");

            var localVarPath = "/v1/{location_id}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// Creates a discount. Creates a discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Discount</returns>
        public V1Discount V1CreateDiscount (string locationId, V1Discount body)
        {
             ApiResponse<V1Discount> localVarResponse = V1CreateDiscountWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a discount. Creates a discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        public ApiResponse< V1Discount > V1CreateDiscountWithHttpInfo (string locationId, V1Discount body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateDiscount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateDiscount");

            var localVarPath = "/v1/{location_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// Creates a discount. Creates a discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Discount</returns>
        public async System.Threading.Tasks.Task<V1Discount> V1CreateDiscountAsync (string locationId, V1Discount body)
        {
             ApiResponse<V1Discount> localVarResponse = await V1CreateDiscountAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a discount. Creates a discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Discount>> V1CreateDiscountAsyncWithHttpInfo (string locationId, V1Discount body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateDiscount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateDiscount");

            var localVarPath = "/v1/{location_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// Creates a fee (tax). Creates a fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Fee</returns>
        public V1Fee V1CreateFee (string locationId, V1Fee body)
        {
             ApiResponse<V1Fee> localVarResponse = V1CreateFeeWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a fee (tax). Creates a fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        public ApiResponse< V1Fee > V1CreateFeeWithHttpInfo (string locationId, V1Fee body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateFee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateFee");

            var localVarPath = "/v1/{location_id}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// Creates a fee (tax). Creates a fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Fee</returns>
        public async System.Threading.Tasks.Task<V1Fee> V1CreateFeeAsync (string locationId, V1Fee body)
        {
             ApiResponse<V1Fee> localVarResponse = await V1CreateFeeAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a fee (tax). Creates a fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Fee>> V1CreateFeeAsyncWithHttpInfo (string locationId, V1Fee body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateFee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateFee");

            var localVarPath = "/v1/{location_id}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// Creates an item and at least one variation for it. Creates an item and at least one variation for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Item</returns>
        public V1Item V1CreateItem (string locationId, V1Item body)
        {
             ApiResponse<V1Item> localVarResponse = V1CreateItemWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an item and at least one variation for it. Creates an item and at least one variation for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > V1CreateItemWithHttpInfo (string locationId, V1Item body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateItem");

            var localVarPath = "/v1/{location_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Creates an item and at least one variation for it. Creates an item and at least one variation for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> V1CreateItemAsync (string locationId, V1Item body)
        {
             ApiResponse<V1Item> localVarResponse = await V1CreateItemAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an item and at least one variation for it. Creates an item and at least one variation for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> V1CreateItemAsyncWithHttpInfo (string locationId, V1Item body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateItem");

            var localVarPath = "/v1/{location_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Creates an item modifier list and at least one modifier option for it. Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierList</returns>
        public V1ModifierList V1CreateModifierList (string locationId, V1ModifierList body)
        {
             ApiResponse<V1ModifierList> localVarResponse = V1CreateModifierListWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an item modifier list and at least one modifier option for it. Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        public ApiResponse< V1ModifierList > V1CreateModifierListWithHttpInfo (string locationId, V1ModifierList body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateModifierList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// Creates an item modifier list and at least one modifier option for it. Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierList</returns>
        public async System.Threading.Tasks.Task<V1ModifierList> V1CreateModifierListAsync (string locationId, V1ModifierList body)
        {
             ApiResponse<V1ModifierList> localVarResponse = await V1CreateModifierListAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an item modifier list and at least one modifier option for it. Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> V1CreateModifierListAsyncWithHttpInfo (string locationId, V1ModifierList body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateModifierList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// Creates an item modifier option and adds it to a modifier list. Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierOption</returns>
        public V1ModifierOption V1CreateModifierOption (string locationId, string modifierListId, V1ModifierOption body)
        {
             ApiResponse<V1ModifierOption> localVarResponse = V1CreateModifierOptionWithHttpInfo(locationId, modifierListId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an item modifier option and adds it to a modifier list. Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        public ApiResponse< V1ModifierOption > V1CreateModifierOptionWithHttpInfo (string locationId, string modifierListId, V1ModifierOption body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1CreateModifierOption");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// Creates an item modifier option and adds it to a modifier list. Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierOption</returns>
        public async System.Threading.Tasks.Task<V1ModifierOption> V1CreateModifierOptionAsync (string locationId, string modifierListId, V1ModifierOption body)
        {
             ApiResponse<V1ModifierOption> localVarResponse = await V1CreateModifierOptionAsyncWithHttpInfo(locationId, modifierListId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an item modifier option and adds it to a modifier list. Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> V1CreateModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, V1ModifierOption body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1CreateModifierOption");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// Creates a Favorites page in Square Register. Creates a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>
        public V1Page V1CreatePage (string locationId, V1Page body)
        {
             ApiResponse<V1Page> localVarResponse = V1CreatePageWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Favorites page in Square Register. Creates a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > V1CreatePageWithHttpInfo (string locationId, V1Page body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreatePage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreatePage");

            var localVarPath = "/v1/{location_id}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Creates a Favorites page in Square Register. Creates a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> V1CreatePageAsync (string locationId, V1Page body)
        {
             ApiResponse<V1Page> localVarResponse = await V1CreatePageAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Favorites page in Square Register. Creates a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> V1CreatePageAsyncWithHttpInfo (string locationId, V1Page body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreatePage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreatePage");

            var localVarPath = "/v1/{location_id}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Creates an item variation for an existing item. Creates an item variation for an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Variation</returns>
        public V1Variation V1CreateVariation (string locationId, string itemId, V1Variation body)
        {
             ApiResponse<V1Variation> localVarResponse = V1CreateVariationWithHttpInfo(locationId, itemId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an item variation for an existing item. Creates an item variation for an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        public ApiResponse< V1Variation > V1CreateVariationWithHttpInfo (string locationId, string itemId, V1Variation body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1CreateVariation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// Creates an item variation for an existing item. Creates an item variation for an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Variation</returns>
        public async System.Threading.Tasks.Task<V1Variation> V1CreateVariationAsync (string locationId, string itemId, V1Variation body)
        {
             ApiResponse<V1Variation> localVarResponse = await V1CreateVariationAsyncWithHttpInfo(locationId, itemId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an item variation for an existing item. Creates an item variation for an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Variation>> V1CreateVariationAsyncWithHttpInfo (string locationId, string itemId, V1Variation body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1CreateVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1CreateVariation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1CreateVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreateVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// Deletes an existing item category. Deletes an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>V1Category</returns>
        public V1Category V1DeleteCategory (string locationId, string categoryId)
        {
             ApiResponse<V1Category> localVarResponse = V1DeleteCategoryWithHttpInfo(locationId, categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing item category. Deletes an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>ApiResponse of V1Category</returns>
        public ApiResponse< V1Category > V1DeleteCategoryWithHttpInfo (string locationId, string categoryId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling ItemsApi->V1DeleteCategory");

            var localVarPath = "/v1/{location_id}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// Deletes an existing item category. Deletes an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>Task of V1Category</returns>
        public async System.Threading.Tasks.Task<V1Category> V1DeleteCategoryAsync (string locationId, string categoryId)
        {
             ApiResponse<V1Category> localVarResponse = await V1DeleteCategoryAsyncWithHttpInfo(locationId, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an existing item category. Deletes an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Category>> V1DeleteCategoryAsyncWithHttpInfo (string locationId, string categoryId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling ItemsApi->V1DeleteCategory");

            var localVarPath = "/v1/{location_id}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// Deletes an existing discount. Deletes an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>V1Discount</returns>
        public V1Discount V1DeleteDiscount (string locationId, string discountId)
        {
             ApiResponse<V1Discount> localVarResponse = V1DeleteDiscountWithHttpInfo(locationId, discountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing discount. Deletes an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        public ApiResponse< V1Discount > V1DeleteDiscountWithHttpInfo (string locationId, string discountId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteDiscount");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling ItemsApi->V1DeleteDiscount");

            var localVarPath = "/v1/{location_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// Deletes an existing discount. Deletes an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>Task of V1Discount</returns>
        public async System.Threading.Tasks.Task<V1Discount> V1DeleteDiscountAsync (string locationId, string discountId)
        {
             ApiResponse<V1Discount> localVarResponse = await V1DeleteDiscountAsyncWithHttpInfo(locationId, discountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an existing discount. Deletes an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Discount>> V1DeleteDiscountAsyncWithHttpInfo (string locationId, string discountId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteDiscount");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling ItemsApi->V1DeleteDiscount");

            var localVarPath = "/v1/{location_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// Deletes an existing fee (tax). Deletes an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>V1Fee</returns>
        public V1Fee V1DeleteFee (string locationId, string feeId)
        {
             ApiResponse<V1Fee> localVarResponse = V1DeleteFeeWithHttpInfo(locationId, feeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing fee (tax). Deletes an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        public ApiResponse< V1Fee > V1DeleteFeeWithHttpInfo (string locationId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling ItemsApi->V1DeleteFee");

            var localVarPath = "/v1/{location_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// Deletes an existing fee (tax). Deletes an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>Task of V1Fee</returns>
        public async System.Threading.Tasks.Task<V1Fee> V1DeleteFeeAsync (string locationId, string feeId)
        {
             ApiResponse<V1Fee> localVarResponse = await V1DeleteFeeAsyncWithHttpInfo(locationId, feeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an existing fee (tax). Deletes an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Fee>> V1DeleteFeeAsyncWithHttpInfo (string locationId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling ItemsApi->V1DeleteFee");

            var localVarPath = "/v1/{location_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// Deletes an existing item and all item variations associated with it. Deletes an existing item and all item variations associated with it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>V1Item</returns>
        public V1Item V1DeleteItem (string locationId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = V1DeleteItemWithHttpInfo(locationId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing item and all item variations associated with it. Deletes an existing item and all item variations associated with it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > V1DeleteItemWithHttpInfo (string locationId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1DeleteItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Deletes an existing item and all item variations associated with it. Deletes an existing item and all item variations associated with it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> V1DeleteItemAsync (string locationId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = await V1DeleteItemAsyncWithHttpInfo(locationId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an existing item and all item variations associated with it. Deletes an existing item and all item variations associated with it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> V1DeleteItemAsyncWithHttpInfo (string locationId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1DeleteItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Deletes an existing item modifier list and all modifier options associated with it. Deletes an existing item modifier list and all modifier options associated with it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>V1ModifierList</returns>
        public V1ModifierList V1DeleteModifierList (string locationId, string modifierListId)
        {
             ApiResponse<V1ModifierList> localVarResponse = V1DeleteModifierListWithHttpInfo(locationId, modifierListId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing item modifier list and all modifier options associated with it. Deletes an existing item modifier list and all modifier options associated with it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        public ApiResponse< V1ModifierList > V1DeleteModifierListWithHttpInfo (string locationId, string modifierListId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1DeleteModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// Deletes an existing item modifier list and all modifier options associated with it. Deletes an existing item modifier list and all modifier options associated with it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>Task of V1ModifierList</returns>
        public async System.Threading.Tasks.Task<V1ModifierList> V1DeleteModifierListAsync (string locationId, string modifierListId)
        {
             ApiResponse<V1ModifierList> localVarResponse = await V1DeleteModifierListAsyncWithHttpInfo(locationId, modifierListId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an existing item modifier list and all modifier options associated with it. Deletes an existing item modifier list and all modifier options associated with it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> V1DeleteModifierListAsyncWithHttpInfo (string locationId, string modifierListId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1DeleteModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// Deletes an existing item modifier option from a modifier list. Deletes an existing item modifier option from a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>V1ModifierOption</returns>
        public V1ModifierOption V1DeleteModifierOption (string locationId, string modifierListId, string modifierOptionId)
        {
             ApiResponse<V1ModifierOption> localVarResponse = V1DeleteModifierOptionWithHttpInfo(locationId, modifierListId, modifierOptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing item modifier option from a modifier list. Deletes an existing item modifier option from a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        public ApiResponse< V1ModifierOption > V1DeleteModifierOptionWithHttpInfo (string locationId, string modifierListId, string modifierOptionId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1DeleteModifierOption");
            // verify the required parameter 'modifierOptionId' is set
            if (modifierOptionId == null)
                throw new ApiException(400, "Missing required parameter 'modifierOptionId' when calling ItemsApi->V1DeleteModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (modifierOptionId != null) localVarPathParams.Add("modifier_option_id", Configuration.ApiClient.ParameterToString(modifierOptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// Deletes an existing item modifier option from a modifier list. Deletes an existing item modifier option from a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>Task of V1ModifierOption</returns>
        public async System.Threading.Tasks.Task<V1ModifierOption> V1DeleteModifierOptionAsync (string locationId, string modifierListId, string modifierOptionId)
        {
             ApiResponse<V1ModifierOption> localVarResponse = await V1DeleteModifierOptionAsyncWithHttpInfo(locationId, modifierListId, modifierOptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an existing item modifier option from a modifier list. Deletes an existing item modifier option from a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> V1DeleteModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, string modifierOptionId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1DeleteModifierOption");
            // verify the required parameter 'modifierOptionId' is set
            if (modifierOptionId == null)
                throw new ApiException(400, "Missing required parameter 'modifierOptionId' when calling ItemsApi->V1DeleteModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (modifierOptionId != null) localVarPathParams.Add("modifier_option_id", Configuration.ApiClient.ParameterToString(modifierOptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// Deletes an existing Favorites page and all of its cells. Deletes an existing Favorites page and all of its cells.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>V1Page</returns>
        public V1Page V1DeletePage (string locationId, string pageId)
        {
             ApiResponse<V1Page> localVarResponse = V1DeletePageWithHttpInfo(locationId, pageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing Favorites page and all of its cells. Deletes an existing Favorites page and all of its cells.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > V1DeletePageWithHttpInfo (string locationId, string pageId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeletePage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling ItemsApi->V1DeletePage");

            var localVarPath = "/v1/{location_id}/pages/{page_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Deletes an existing Favorites page and all of its cells. Deletes an existing Favorites page and all of its cells.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> V1DeletePageAsync (string locationId, string pageId)
        {
             ApiResponse<V1Page> localVarResponse = await V1DeletePageAsyncWithHttpInfo(locationId, pageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an existing Favorites page and all of its cells. Deletes an existing Favorites page and all of its cells.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> V1DeletePageAsyncWithHttpInfo (string locationId, string pageId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeletePage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling ItemsApi->V1DeletePage");

            var localVarPath = "/v1/{location_id}/pages/{page_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Deletes a cell from a Favorites page in Square Register. Deletes a cell from a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>V1Page</returns>
        public V1Page V1DeletePageCell (string locationId, string pageId, string row = null, string column = null)
        {
             ApiResponse<V1Page> localVarResponse = V1DeletePageCellWithHttpInfo(locationId, pageId, row, column);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a cell from a Favorites page in Square Register. Deletes a cell from a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > V1DeletePageCellWithHttpInfo (string locationId, string pageId, string row = null, string column = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeletePageCell");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling ItemsApi->V1DeletePageCell");

            var localVarPath = "/v1/{location_id}/pages/{page_id}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeletePageCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Deletes a cell from a Favorites page in Square Register. Deletes a cell from a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> V1DeletePageCellAsync (string locationId, string pageId, string row = null, string column = null)
        {
             ApiResponse<V1Page> localVarResponse = await V1DeletePageCellAsyncWithHttpInfo(locationId, pageId, row, column);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a cell from a Favorites page in Square Register. Deletes a cell from a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> V1DeletePageCellAsyncWithHttpInfo (string locationId, string pageId, string row = null, string column = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeletePageCell");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling ItemsApi->V1DeletePageCell");

            var localVarPath = "/v1/{location_id}/pages/{page_id}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeletePageCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Deletes an existing item variation from an item. Deletes an existing item variation from an item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>V1Variation</returns>
        public V1Variation V1DeleteVariation (string locationId, string itemId, string variationId)
        {
             ApiResponse<V1Variation> localVarResponse = V1DeleteVariationWithHttpInfo(locationId, itemId, variationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing item variation from an item. Deletes an existing item variation from an item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        public ApiResponse< V1Variation > V1DeleteVariationWithHttpInfo (string locationId, string itemId, string variationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1DeleteVariation");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->V1DeleteVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// Deletes an existing item variation from an item. Deletes an existing item variation from an item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>Task of V1Variation</returns>
        public async System.Threading.Tasks.Task<V1Variation> V1DeleteVariationAsync (string locationId, string itemId, string variationId)
        {
             ApiResponse<V1Variation> localVarResponse = await V1DeleteVariationAsyncWithHttpInfo(locationId, itemId, variationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an existing item variation from an item. Deletes an existing item variation from an item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Variation>> V1DeleteVariationAsyncWithHttpInfo (string locationId, string itemId, string variationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1DeleteVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1DeleteVariation");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->V1DeleteVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DeleteVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s item categories. Lists all of a location&#39;s item categories.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>List&lt;V1Category&gt;</returns>
        public List<V1Category> V1ListCategories (string locationId)
        {
             ApiResponse<List<V1Category>> localVarResponse = V1ListCategoriesWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all of a location&#39;s item categories. Lists all of a location&#39;s item categories.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>ApiResponse of List&lt;V1Category&gt;</returns>
        public ApiResponse< List<V1Category> > V1ListCategoriesWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListCategories");

            var localVarPath = "/v1/{location_id}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Category>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Category>)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s item categories. Lists all of a location&#39;s item categories.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of List&lt;V1Category&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Category>> V1ListCategoriesAsync (string locationId)
        {
             ApiResponse<List<V1Category>> localVarResponse = await V1ListCategoriesAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all of a location&#39;s item categories. Lists all of a location&#39;s item categories.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Category&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Category>>> V1ListCategoriesAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListCategories");

            var localVarPath = "/v1/{location_id}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Category>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Category>)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s discounts. Lists all of a location&#39;s discounts.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>List&lt;V1Discount&gt;</returns>
        public List<V1Discount> V1ListDiscounts (string locationId)
        {
             ApiResponse<List<V1Discount>> localVarResponse = V1ListDiscountsWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all of a location&#39;s discounts. Lists all of a location&#39;s discounts.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>ApiResponse of List&lt;V1Discount&gt;</returns>
        public ApiResponse< List<V1Discount> > V1ListDiscountsWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListDiscounts");

            var localVarPath = "/v1/{location_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListDiscounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Discount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Discount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Discount>)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s discounts. Lists all of a location&#39;s discounts.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of List&lt;V1Discount&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Discount>> V1ListDiscountsAsync (string locationId)
        {
             ApiResponse<List<V1Discount>> localVarResponse = await V1ListDiscountsAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all of a location&#39;s discounts. Lists all of a location&#39;s discounts.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Discount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Discount>>> V1ListDiscountsAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListDiscounts");

            var localVarPath = "/v1/{location_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListDiscounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Discount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Discount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Discount>)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s fees (taxes). Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>List&lt;V1Fee&gt;</returns>
        public List<V1Fee> V1ListFees (string locationId)
        {
             ApiResponse<List<V1Fee>> localVarResponse = V1ListFeesWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all of a location&#39;s fees (taxes). Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>ApiResponse of List&lt;V1Fee&gt;</returns>
        public ApiResponse< List<V1Fee> > V1ListFeesWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListFees");

            var localVarPath = "/v1/{location_id}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Fee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Fee>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Fee>)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s fees (taxes). Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>Task of List&lt;V1Fee&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Fee>> V1ListFeesAsync (string locationId)
        {
             ApiResponse<List<V1Fee>> localVarResponse = await V1ListFeesAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all of a location&#39;s fees (taxes). Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Fee&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Fee>>> V1ListFeesAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListFees");

            var localVarPath = "/v1/{location_id}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Fee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Fee>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Fee>)));
            
        }

        /// <summary>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations. Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <returns>List&lt;V1InventoryEntry&gt;</returns>
        public List<V1InventoryEntry> V1ListInventory (string locationId, int? limit = null)
        {
             ApiResponse<List<V1InventoryEntry>> localVarResponse = V1ListInventoryWithHttpInfo(locationId, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations. Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1InventoryEntry&gt;</returns>
        public ApiResponse< List<V1InventoryEntry> > V1ListInventoryWithHttpInfo (string locationId, int? limit = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListInventory");

            var localVarPath = "/v1/{location_id}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1InventoryEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1InventoryEntry>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1InventoryEntry>)));
            
        }

        /// <summary>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations. Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <returns>Task of List&lt;V1InventoryEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1InventoryEntry>> V1ListInventoryAsync (string locationId, int? limit = null)
        {
             ApiResponse<List<V1InventoryEntry>> localVarResponse = await V1ListInventoryAsyncWithHttpInfo(locationId, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations. Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1InventoryEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1InventoryEntry>>> V1ListInventoryAsyncWithHttpInfo (string locationId, int? limit = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListInventory");

            var localVarPath = "/v1/{location_id}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1InventoryEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1InventoryEntry>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1InventoryEntry>)));
            
        }

        /// <summary>
        /// Provides summary information for all of a location&#39;s items. Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <returns>List&lt;V1Item&gt;</returns>
        public List<V1Item> V1ListItems (string locationId)
        {
             ApiResponse<List<V1Item>> localVarResponse = V1ListItemsWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides summary information for all of a location&#39;s items. Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <returns>ApiResponse of List&lt;V1Item&gt;</returns>
        public ApiResponse< List<V1Item> > V1ListItemsWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListItems");

            var localVarPath = "/v1/{location_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Item>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Item>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Item>)));
            
        }

        /// <summary>
        /// Provides summary information for all of a location&#39;s items. Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <returns>Task of List&lt;V1Item&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Item>> V1ListItemsAsync (string locationId)
        {
             ApiResponse<List<V1Item>> localVarResponse = await V1ListItemsAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides summary information for all of a location&#39;s items. Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Item&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Item>>> V1ListItemsAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListItems");

            var localVarPath = "/v1/{location_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Item>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Item>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Item>)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s modifier lists. Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>List&lt;V1ModifierList&gt;</returns>
        public List<V1ModifierList> V1ListModifierLists (string locationId)
        {
             ApiResponse<List<V1ModifierList>> localVarResponse = V1ListModifierListsWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all of a location&#39;s modifier lists. Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>ApiResponse of List&lt;V1ModifierList&gt;</returns>
        public ApiResponse< List<V1ModifierList> > V1ListModifierListsWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListModifierLists");

            var localVarPath = "/v1/{location_id}/modifier-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListModifierLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1ModifierList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1ModifierList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1ModifierList>)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s modifier lists. Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>Task of List&lt;V1ModifierList&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1ModifierList>> V1ListModifierListsAsync (string locationId)
        {
             ApiResponse<List<V1ModifierList>> localVarResponse = await V1ListModifierListsAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all of a location&#39;s modifier lists. Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1ModifierList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1ModifierList>>> V1ListModifierListsAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListModifierLists");

            var localVarPath = "/v1/{location_id}/modifier-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListModifierLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1ModifierList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1ModifierList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1ModifierList>)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s Favorites pages in Square Register. Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>List&lt;V1Page&gt;</returns>
        public List<V1Page> V1ListPages (string locationId)
        {
             ApiResponse<List<V1Page>> localVarResponse = V1ListPagesWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all of a location&#39;s Favorites pages in Square Register. Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>ApiResponse of List&lt;V1Page&gt;</returns>
        public ApiResponse< List<V1Page> > V1ListPagesWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListPages");

            var localVarPath = "/v1/{location_id}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Page>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Page>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Page>)));
            
        }

        /// <summary>
        /// Lists all of a location&#39;s Favorites pages in Square Register. Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>Task of List&lt;V1Page&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Page>> V1ListPagesAsync (string locationId)
        {
             ApiResponse<List<V1Page>> localVarResponse = await V1ListPagesAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all of a location&#39;s Favorites pages in Square Register. Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Page&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Page>>> V1ListPagesAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1ListPages");

            var localVarPath = "/v1/{location_id}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ListPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Page>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Page>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Page>)));
            
        }

        /// <summary>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register. Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>V1Item</returns>
        public V1Item V1RemoveFee (string locationId, string itemId, string feeId)
        {
             ApiResponse<V1Item> localVarResponse = V1RemoveFeeWithHttpInfo(locationId, itemId, feeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register. Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > V1RemoveFeeWithHttpInfo (string locationId, string itemId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1RemoveFee");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1RemoveFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling ItemsApi->V1RemoveFee");

            var localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RemoveFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register. Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> V1RemoveFeeAsync (string locationId, string itemId, string feeId)
        {
             ApiResponse<V1Item> localVarResponse = await V1RemoveFeeAsyncWithHttpInfo(locationId, itemId, feeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register. Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> V1RemoveFeeAsyncWithHttpInfo (string locationId, string itemId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1RemoveFee");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1RemoveFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling ItemsApi->V1RemoveFee");

            var localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RemoveFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item. Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>V1Item</returns>
        public V1Item V1RemoveModifierList (string locationId, string modifierListId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = V1RemoveModifierListWithHttpInfo(locationId, modifierListId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item. Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > V1RemoveModifierListWithHttpInfo (string locationId, string modifierListId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1RemoveModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1RemoveModifierList");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1RemoveModifierList");

            var localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RemoveModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item. Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> V1RemoveModifierListAsync (string locationId, string modifierListId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = await V1RemoveModifierListAsyncWithHttpInfo(locationId, modifierListId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item. Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> V1RemoveModifierListAsyncWithHttpInfo (string locationId, string modifierListId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1RemoveModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1RemoveModifierList");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1RemoveModifierList");

            var localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RemoveModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Provides the details for a single item, including associated modifier lists and fees. Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>V1Item</returns>
        public V1Item V1RetrieveItem (string locationId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = V1RetrieveItemWithHttpInfo(locationId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the details for a single item, including associated modifier lists and fees. Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > V1RetrieveItemWithHttpInfo (string locationId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1RetrieveItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1RetrieveItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Provides the details for a single item, including associated modifier lists and fees. Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> V1RetrieveItemAsync (string locationId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = await V1RetrieveItemAsyncWithHttpInfo(locationId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides the details for a single item, including associated modifier lists and fees. Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> V1RetrieveItemAsyncWithHttpInfo (string locationId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1RetrieveItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1RetrieveItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Provides the details for a single modifier list. Provides the details for a single modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>V1ModifierList</returns>
        public V1ModifierList V1RetrieveModifierList (string locationId, string modifierListId)
        {
             ApiResponse<V1ModifierList> localVarResponse = V1RetrieveModifierListWithHttpInfo(locationId, modifierListId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the details for a single modifier list. Provides the details for a single modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        public ApiResponse< V1ModifierList > V1RetrieveModifierListWithHttpInfo (string locationId, string modifierListId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1RetrieveModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1RetrieveModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// Provides the details for a single modifier list. Provides the details for a single modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>Task of V1ModifierList</returns>
        public async System.Threading.Tasks.Task<V1ModifierList> V1RetrieveModifierListAsync (string locationId, string modifierListId)
        {
             ApiResponse<V1ModifierList> localVarResponse = await V1RetrieveModifierListAsyncWithHttpInfo(locationId, modifierListId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides the details for a single modifier list. Provides the details for a single modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> V1RetrieveModifierListAsyncWithHttpInfo (string locationId, string modifierListId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1RetrieveModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1RetrieveModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RetrieveModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// Modifies the details of an existing item category. Modifies the details of an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Category</returns>
        public V1Category V1UpdateCategory (string locationId, string categoryId, V1Category body)
        {
             ApiResponse<V1Category> localVarResponse = V1UpdateCategoryWithHttpInfo(locationId, categoryId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the details of an existing item category. Modifies the details of an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Category</returns>
        public ApiResponse< V1Category > V1UpdateCategoryWithHttpInfo (string locationId, string categoryId, V1Category body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling ItemsApi->V1UpdateCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateCategory");

            var localVarPath = "/v1/{location_id}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// Modifies the details of an existing item category. Modifies the details of an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Category</returns>
        public async System.Threading.Tasks.Task<V1Category> V1UpdateCategoryAsync (string locationId, string categoryId, V1Category body)
        {
             ApiResponse<V1Category> localVarResponse = await V1UpdateCategoryAsyncWithHttpInfo(locationId, categoryId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the details of an existing item category. Modifies the details of an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Category>> V1UpdateCategoryAsyncWithHttpInfo (string locationId, string categoryId, V1Category body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling ItemsApi->V1UpdateCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateCategory");

            var localVarPath = "/v1/{location_id}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// Modifies the details of an existing discount. Modifies the details of an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Discount</returns>
        public V1Discount V1UpdateDiscount (string locationId, string discountId, V1Discount body)
        {
             ApiResponse<V1Discount> localVarResponse = V1UpdateDiscountWithHttpInfo(locationId, discountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the details of an existing discount. Modifies the details of an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        public ApiResponse< V1Discount > V1UpdateDiscountWithHttpInfo (string locationId, string discountId, V1Discount body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateDiscount");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling ItemsApi->V1UpdateDiscount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateDiscount");

            var localVarPath = "/v1/{location_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// Modifies the details of an existing discount. Modifies the details of an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Discount</returns>
        public async System.Threading.Tasks.Task<V1Discount> V1UpdateDiscountAsync (string locationId, string discountId, V1Discount body)
        {
             ApiResponse<V1Discount> localVarResponse = await V1UpdateDiscountAsyncWithHttpInfo(locationId, discountId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the details of an existing discount. Modifies the details of an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Discount>> V1UpdateDiscountAsyncWithHttpInfo (string locationId, string discountId, V1Discount body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateDiscount");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling ItemsApi->V1UpdateDiscount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateDiscount");

            var localVarPath = "/v1/{location_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// Modifies the details of an existing fee (tax). Modifies the details of an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Fee</returns>
        public V1Fee V1UpdateFee (string locationId, string feeId, V1Fee body)
        {
             ApiResponse<V1Fee> localVarResponse = V1UpdateFeeWithHttpInfo(locationId, feeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the details of an existing fee (tax). Modifies the details of an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        public ApiResponse< V1Fee > V1UpdateFeeWithHttpInfo (string locationId, string feeId, V1Fee body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling ItemsApi->V1UpdateFee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateFee");

            var localVarPath = "/v1/{location_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// Modifies the details of an existing fee (tax). Modifies the details of an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Fee</returns>
        public async System.Threading.Tasks.Task<V1Fee> V1UpdateFeeAsync (string locationId, string feeId, V1Fee body)
        {
             ApiResponse<V1Fee> localVarResponse = await V1UpdateFeeAsyncWithHttpInfo(locationId, feeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the details of an existing fee (tax). Modifies the details of an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Fee>> V1UpdateFeeAsyncWithHttpInfo (string locationId, string feeId, V1Fee body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling ItemsApi->V1UpdateFee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateFee");

            var localVarPath = "/v1/{location_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// Modifies the core details of an existing item. Modifies the core details of an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Item</returns>
        public V1Item V1UpdateItem (string locationId, string itemId, V1Item body)
        {
             ApiResponse<V1Item> localVarResponse = V1UpdateItemWithHttpInfo(locationId, itemId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the core details of an existing item. Modifies the core details of an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > V1UpdateItemWithHttpInfo (string locationId, string itemId, V1Item body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1UpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Modifies the core details of an existing item. Modifies the core details of an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> V1UpdateItemAsync (string locationId, string itemId, V1Item body)
        {
             ApiResponse<V1Item> localVarResponse = await V1UpdateItemAsyncWithHttpInfo(locationId, itemId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the core details of an existing item. Modifies the core details of an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> V1UpdateItemAsyncWithHttpInfo (string locationId, string itemId, V1Item body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1UpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// Modifies the details of an existing item modifier list. Modifies the details of an existing item modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierList</returns>
        public V1ModifierList V1UpdateModifierList (string locationId, string modifierListId, V1UpdateModifierListRequest body)
        {
             ApiResponse<V1ModifierList> localVarResponse = V1UpdateModifierListWithHttpInfo(locationId, modifierListId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the details of an existing item modifier list. Modifies the details of an existing item modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        public ApiResponse< V1ModifierList > V1UpdateModifierListWithHttpInfo (string locationId, string modifierListId, V1UpdateModifierListRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1UpdateModifierList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// Modifies the details of an existing item modifier list. Modifies the details of an existing item modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierList</returns>
        public async System.Threading.Tasks.Task<V1ModifierList> V1UpdateModifierListAsync (string locationId, string modifierListId, V1UpdateModifierListRequest body)
        {
             ApiResponse<V1ModifierList> localVarResponse = await V1UpdateModifierListAsyncWithHttpInfo(locationId, modifierListId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the details of an existing item modifier list. Modifies the details of an existing item modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> V1UpdateModifierListAsyncWithHttpInfo (string locationId, string modifierListId, V1UpdateModifierListRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1UpdateModifierList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// Modifies the details of an existing item modifier option. Modifies the details of an existing item modifier option.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierOption</returns>
        public V1ModifierOption V1UpdateModifierOption (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body)
        {
             ApiResponse<V1ModifierOption> localVarResponse = V1UpdateModifierOptionWithHttpInfo(locationId, modifierListId, modifierOptionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the details of an existing item modifier option. Modifies the details of an existing item modifier option.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        public ApiResponse< V1ModifierOption > V1UpdateModifierOptionWithHttpInfo (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1UpdateModifierOption");
            // verify the required parameter 'modifierOptionId' is set
            if (modifierOptionId == null)
                throw new ApiException(400, "Missing required parameter 'modifierOptionId' when calling ItemsApi->V1UpdateModifierOption");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (modifierOptionId != null) localVarPathParams.Add("modifier_option_id", Configuration.ApiClient.ParameterToString(modifierOptionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// Modifies the details of an existing item modifier option. Modifies the details of an existing item modifier option.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierOption</returns>
        public async System.Threading.Tasks.Task<V1ModifierOption> V1UpdateModifierOptionAsync (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body)
        {
             ApiResponse<V1ModifierOption> localVarResponse = await V1UpdateModifierOptionAsyncWithHttpInfo(locationId, modifierListId, modifierOptionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the details of an existing item modifier option. Modifies the details of an existing item modifier option.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> V1UpdateModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling ItemsApi->V1UpdateModifierOption");
            // verify the required parameter 'modifierOptionId' is set
            if (modifierOptionId == null)
                throw new ApiException(400, "Missing required parameter 'modifierOptionId' when calling ItemsApi->V1UpdateModifierOption");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (modifierOptionId != null) localVarPathParams.Add("modifier_option_id", Configuration.ApiClient.ParameterToString(modifierOptionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// Modifies the details of a Favorites page in Square Register. Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>
        public V1Page V1UpdatePage (string locationId, string pageId, V1Page body)
        {
             ApiResponse<V1Page> localVarResponse = V1UpdatePageWithHttpInfo(locationId, pageId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the details of a Favorites page in Square Register. Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > V1UpdatePageWithHttpInfo (string locationId, string pageId, V1Page body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdatePage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling ItemsApi->V1UpdatePage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdatePage");

            var localVarPath = "/v1/{location_id}/pages/{page_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Modifies the details of a Favorites page in Square Register. Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> V1UpdatePageAsync (string locationId, string pageId, V1Page body)
        {
             ApiResponse<V1Page> localVarResponse = await V1UpdatePageAsyncWithHttpInfo(locationId, pageId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the details of a Favorites page in Square Register. Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> V1UpdatePageAsyncWithHttpInfo (string locationId, string pageId, V1Page body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdatePage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling ItemsApi->V1UpdatePage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdatePage");

            var localVarPath = "/v1/{location_id}/pages/{page_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Modifies a cell of a Favorites page in Square Register. Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>
        public V1Page V1UpdatePageCell (string locationId, string pageId, V1PageCell body)
        {
             ApiResponse<V1Page> localVarResponse = V1UpdatePageCellWithHttpInfo(locationId, pageId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a cell of a Favorites page in Square Register. Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > V1UpdatePageCellWithHttpInfo (string locationId, string pageId, V1PageCell body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdatePageCell");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling ItemsApi->V1UpdatePageCell");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdatePageCell");

            var localVarPath = "/v1/{location_id}/pages/{page_id}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdatePageCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Modifies a cell of a Favorites page in Square Register. Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> V1UpdatePageCellAsync (string locationId, string pageId, V1PageCell body)
        {
             ApiResponse<V1Page> localVarResponse = await V1UpdatePageCellAsyncWithHttpInfo(locationId, pageId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies a cell of a Favorites page in Square Register. Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> V1UpdatePageCellAsyncWithHttpInfo (string locationId, string pageId, V1PageCell body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdatePageCell");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling ItemsApi->V1UpdatePageCell");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdatePageCell");

            var localVarPath = "/v1/{location_id}/pages/{page_id}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdatePageCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// Modifies the details of an existing item variation. Modifies the details of an existing item variation.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Variation</returns>
        public V1Variation V1UpdateVariation (string locationId, string itemId, string variationId, V1Variation body)
        {
             ApiResponse<V1Variation> localVarResponse = V1UpdateVariationWithHttpInfo(locationId, itemId, variationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the details of an existing item variation. Modifies the details of an existing item variation.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        public ApiResponse< V1Variation > V1UpdateVariationWithHttpInfo (string locationId, string itemId, string variationId, V1Variation body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1UpdateVariation");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->V1UpdateVariation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// Modifies the details of an existing item variation. Modifies the details of an existing item variation.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Variation</returns>
        public async System.Threading.Tasks.Task<V1Variation> V1UpdateVariationAsync (string locationId, string itemId, string variationId, V1Variation body)
        {
             ApiResponse<V1Variation> localVarResponse = await V1UpdateVariationAsyncWithHttpInfo(locationId, itemId, variationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the details of an existing item variation. Modifies the details of an existing item variation.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Variation>> V1UpdateVariationAsyncWithHttpInfo (string locationId, string itemId, string variationId, V1Variation body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling ItemsApi->V1UpdateVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling ItemsApi->V1UpdateVariation");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling ItemsApi->V1UpdateVariation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->V1UpdateVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UpdateVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

    }
}
