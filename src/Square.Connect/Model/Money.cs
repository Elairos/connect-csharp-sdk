/* 
 * Square Connect API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Square.Connect.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Money :  IEquatable<Money>
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum Aed for "AED"
            /// </summary>
            [EnumMember(Value = "AED")]
            Aed,
            
            /// <summary>
            /// Enum Afn for "AFN"
            /// </summary>
            [EnumMember(Value = "AFN")]
            Afn,
            
            /// <summary>
            /// Enum All for "ALL"
            /// </summary>
            [EnumMember(Value = "ALL")]
            All,
            
            /// <summary>
            /// Enum Amd for "AMD"
            /// </summary>
            [EnumMember(Value = "AMD")]
            Amd,
            
            /// <summary>
            /// Enum Ang for "ANG"
            /// </summary>
            [EnumMember(Value = "ANG")]
            Ang,
            
            /// <summary>
            /// Enum Aoa for "AOA"
            /// </summary>
            [EnumMember(Value = "AOA")]
            Aoa,
            
            /// <summary>
            /// Enum Ars for "ARS"
            /// </summary>
            [EnumMember(Value = "ARS")]
            Ars,
            
            /// <summary>
            /// Enum Aud for "AUD"
            /// </summary>
            [EnumMember(Value = "AUD")]
            Aud,
            
            /// <summary>
            /// Enum Awg for "AWG"
            /// </summary>
            [EnumMember(Value = "AWG")]
            Awg,
            
            /// <summary>
            /// Enum Azn for "AZN"
            /// </summary>
            [EnumMember(Value = "AZN")]
            Azn,
            
            /// <summary>
            /// Enum Bam for "BAM"
            /// </summary>
            [EnumMember(Value = "BAM")]
            Bam,
            
            /// <summary>
            /// Enum Bbd for "BBD"
            /// </summary>
            [EnumMember(Value = "BBD")]
            Bbd,
            
            /// <summary>
            /// Enum Bdt for "BDT"
            /// </summary>
            [EnumMember(Value = "BDT")]
            Bdt,
            
            /// <summary>
            /// Enum Bgn for "BGN"
            /// </summary>
            [EnumMember(Value = "BGN")]
            Bgn,
            
            /// <summary>
            /// Enum Bhd for "BHD"
            /// </summary>
            [EnumMember(Value = "BHD")]
            Bhd,
            
            /// <summary>
            /// Enum Bif for "BIF"
            /// </summary>
            [EnumMember(Value = "BIF")]
            Bif,
            
            /// <summary>
            /// Enum Bmd for "BMD"
            /// </summary>
            [EnumMember(Value = "BMD")]
            Bmd,
            
            /// <summary>
            /// Enum Bnd for "BND"
            /// </summary>
            [EnumMember(Value = "BND")]
            Bnd,
            
            /// <summary>
            /// Enum Bob for "BOB"
            /// </summary>
            [EnumMember(Value = "BOB")]
            Bob,
            
            /// <summary>
            /// Enum Bov for "BOV"
            /// </summary>
            [EnumMember(Value = "BOV")]
            Bov,
            
            /// <summary>
            /// Enum Brl for "BRL"
            /// </summary>
            [EnumMember(Value = "BRL")]
            Brl,
            
            /// <summary>
            /// Enum Bsd for "BSD"
            /// </summary>
            [EnumMember(Value = "BSD")]
            Bsd,
            
            /// <summary>
            /// Enum Btn for "BTN"
            /// </summary>
            [EnumMember(Value = "BTN")]
            Btn,
            
            /// <summary>
            /// Enum Bwp for "BWP"
            /// </summary>
            [EnumMember(Value = "BWP")]
            Bwp,
            
            /// <summary>
            /// Enum Byr for "BYR"
            /// </summary>
            [EnumMember(Value = "BYR")]
            Byr,
            
            /// <summary>
            /// Enum Bzd for "BZD"
            /// </summary>
            [EnumMember(Value = "BZD")]
            Bzd,
            
            /// <summary>
            /// Enum Cad for "CAD"
            /// </summary>
            [EnumMember(Value = "CAD")]
            Cad,
            
            /// <summary>
            /// Enum Cdf for "CDF"
            /// </summary>
            [EnumMember(Value = "CDF")]
            Cdf,
            
            /// <summary>
            /// Enum Che for "CHE"
            /// </summary>
            [EnumMember(Value = "CHE")]
            Che,
            
            /// <summary>
            /// Enum Chf for "CHF"
            /// </summary>
            [EnumMember(Value = "CHF")]
            Chf,
            
            /// <summary>
            /// Enum Chw for "CHW"
            /// </summary>
            [EnumMember(Value = "CHW")]
            Chw,
            
            /// <summary>
            /// Enum Clf for "CLF"
            /// </summary>
            [EnumMember(Value = "CLF")]
            Clf,
            
            /// <summary>
            /// Enum Clp for "CLP"
            /// </summary>
            [EnumMember(Value = "CLP")]
            Clp,
            
            /// <summary>
            /// Enum Cny for "CNY"
            /// </summary>
            [EnumMember(Value = "CNY")]
            Cny,
            
            /// <summary>
            /// Enum Cop for "COP"
            /// </summary>
            [EnumMember(Value = "COP")]
            Cop,
            
            /// <summary>
            /// Enum Cou for "COU"
            /// </summary>
            [EnumMember(Value = "COU")]
            Cou,
            
            /// <summary>
            /// Enum Crc for "CRC"
            /// </summary>
            [EnumMember(Value = "CRC")]
            Crc,
            
            /// <summary>
            /// Enum Cuc for "CUC"
            /// </summary>
            [EnumMember(Value = "CUC")]
            Cuc,
            
            /// <summary>
            /// Enum Cup for "CUP"
            /// </summary>
            [EnumMember(Value = "CUP")]
            Cup,
            
            /// <summary>
            /// Enum Cve for "CVE"
            /// </summary>
            [EnumMember(Value = "CVE")]
            Cve,
            
            /// <summary>
            /// Enum Czk for "CZK"
            /// </summary>
            [EnumMember(Value = "CZK")]
            Czk,
            
            /// <summary>
            /// Enum Djf for "DJF"
            /// </summary>
            [EnumMember(Value = "DJF")]
            Djf,
            
            /// <summary>
            /// Enum Dkk for "DKK"
            /// </summary>
            [EnumMember(Value = "DKK")]
            Dkk,
            
            /// <summary>
            /// Enum Dop for "DOP"
            /// </summary>
            [EnumMember(Value = "DOP")]
            Dop,
            
            /// <summary>
            /// Enum Dzd for "DZD"
            /// </summary>
            [EnumMember(Value = "DZD")]
            Dzd,
            
            /// <summary>
            /// Enum Egp for "EGP"
            /// </summary>
            [EnumMember(Value = "EGP")]
            Egp,
            
            /// <summary>
            /// Enum Ern for "ERN"
            /// </summary>
            [EnumMember(Value = "ERN")]
            Ern,
            
            /// <summary>
            /// Enum Etb for "ETB"
            /// </summary>
            [EnumMember(Value = "ETB")]
            Etb,
            
            /// <summary>
            /// Enum Eur for "EUR"
            /// </summary>
            [EnumMember(Value = "EUR")]
            Eur,
            
            /// <summary>
            /// Enum Fjd for "FJD"
            /// </summary>
            [EnumMember(Value = "FJD")]
            Fjd,
            
            /// <summary>
            /// Enum Fkp for "FKP"
            /// </summary>
            [EnumMember(Value = "FKP")]
            Fkp,
            
            /// <summary>
            /// Enum Gbp for "GBP"
            /// </summary>
            [EnumMember(Value = "GBP")]
            Gbp,
            
            /// <summary>
            /// Enum Gel for "GEL"
            /// </summary>
            [EnumMember(Value = "GEL")]
            Gel,
            
            /// <summary>
            /// Enum Ghs for "GHS"
            /// </summary>
            [EnumMember(Value = "GHS")]
            Ghs,
            
            /// <summary>
            /// Enum Gip for "GIP"
            /// </summary>
            [EnumMember(Value = "GIP")]
            Gip,
            
            /// <summary>
            /// Enum Gmd for "GMD"
            /// </summary>
            [EnumMember(Value = "GMD")]
            Gmd,
            
            /// <summary>
            /// Enum Gnf for "GNF"
            /// </summary>
            [EnumMember(Value = "GNF")]
            Gnf,
            
            /// <summary>
            /// Enum Gtq for "GTQ"
            /// </summary>
            [EnumMember(Value = "GTQ")]
            Gtq,
            
            /// <summary>
            /// Enum Gyd for "GYD"
            /// </summary>
            [EnumMember(Value = "GYD")]
            Gyd,
            
            /// <summary>
            /// Enum Hkd for "HKD"
            /// </summary>
            [EnumMember(Value = "HKD")]
            Hkd,
            
            /// <summary>
            /// Enum Hnl for "HNL"
            /// </summary>
            [EnumMember(Value = "HNL")]
            Hnl,
            
            /// <summary>
            /// Enum Hrk for "HRK"
            /// </summary>
            [EnumMember(Value = "HRK")]
            Hrk,
            
            /// <summary>
            /// Enum Htg for "HTG"
            /// </summary>
            [EnumMember(Value = "HTG")]
            Htg,
            
            /// <summary>
            /// Enum Huf for "HUF"
            /// </summary>
            [EnumMember(Value = "HUF")]
            Huf,
            
            /// <summary>
            /// Enum Idr for "IDR"
            /// </summary>
            [EnumMember(Value = "IDR")]
            Idr,
            
            /// <summary>
            /// Enum Ils for "ILS"
            /// </summary>
            [EnumMember(Value = "ILS")]
            Ils,
            
            /// <summary>
            /// Enum Inr for "INR"
            /// </summary>
            [EnumMember(Value = "INR")]
            Inr,
            
            /// <summary>
            /// Enum Iqd for "IQD"
            /// </summary>
            [EnumMember(Value = "IQD")]
            Iqd,
            
            /// <summary>
            /// Enum Irr for "IRR"
            /// </summary>
            [EnumMember(Value = "IRR")]
            Irr,
            
            /// <summary>
            /// Enum Isk for "ISK"
            /// </summary>
            [EnumMember(Value = "ISK")]
            Isk,
            
            /// <summary>
            /// Enum Jmd for "JMD"
            /// </summary>
            [EnumMember(Value = "JMD")]
            Jmd,
            
            /// <summary>
            /// Enum Jod for "JOD"
            /// </summary>
            [EnumMember(Value = "JOD")]
            Jod,
            
            /// <summary>
            /// Enum Jpy for "JPY"
            /// </summary>
            [EnumMember(Value = "JPY")]
            Jpy,
            
            /// <summary>
            /// Enum Kes for "KES"
            /// </summary>
            [EnumMember(Value = "KES")]
            Kes,
            
            /// <summary>
            /// Enum Kgs for "KGS"
            /// </summary>
            [EnumMember(Value = "KGS")]
            Kgs,
            
            /// <summary>
            /// Enum Khr for "KHR"
            /// </summary>
            [EnumMember(Value = "KHR")]
            Khr,
            
            /// <summary>
            /// Enum Kmf for "KMF"
            /// </summary>
            [EnumMember(Value = "KMF")]
            Kmf,
            
            /// <summary>
            /// Enum Kpw for "KPW"
            /// </summary>
            [EnumMember(Value = "KPW")]
            Kpw,
            
            /// <summary>
            /// Enum Krw for "KRW"
            /// </summary>
            [EnumMember(Value = "KRW")]
            Krw,
            
            /// <summary>
            /// Enum Kwd for "KWD"
            /// </summary>
            [EnumMember(Value = "KWD")]
            Kwd,
            
            /// <summary>
            /// Enum Kyd for "KYD"
            /// </summary>
            [EnumMember(Value = "KYD")]
            Kyd,
            
            /// <summary>
            /// Enum Kzt for "KZT"
            /// </summary>
            [EnumMember(Value = "KZT")]
            Kzt,
            
            /// <summary>
            /// Enum Lak for "LAK"
            /// </summary>
            [EnumMember(Value = "LAK")]
            Lak,
            
            /// <summary>
            /// Enum Lbp for "LBP"
            /// </summary>
            [EnumMember(Value = "LBP")]
            Lbp,
            
            /// <summary>
            /// Enum Lkr for "LKR"
            /// </summary>
            [EnumMember(Value = "LKR")]
            Lkr,
            
            /// <summary>
            /// Enum Lrd for "LRD"
            /// </summary>
            [EnumMember(Value = "LRD")]
            Lrd,
            
            /// <summary>
            /// Enum Lsl for "LSL"
            /// </summary>
            [EnumMember(Value = "LSL")]
            Lsl,
            
            /// <summary>
            /// Enum Ltl for "LTL"
            /// </summary>
            [EnumMember(Value = "LTL")]
            Ltl,
            
            /// <summary>
            /// Enum Lvl for "LVL"
            /// </summary>
            [EnumMember(Value = "LVL")]
            Lvl,
            
            /// <summary>
            /// Enum Lyd for "LYD"
            /// </summary>
            [EnumMember(Value = "LYD")]
            Lyd,
            
            /// <summary>
            /// Enum Mad for "MAD"
            /// </summary>
            [EnumMember(Value = "MAD")]
            Mad,
            
            /// <summary>
            /// Enum Mdl for "MDL"
            /// </summary>
            [EnumMember(Value = "MDL")]
            Mdl,
            
            /// <summary>
            /// Enum Mga for "MGA"
            /// </summary>
            [EnumMember(Value = "MGA")]
            Mga,
            
            /// <summary>
            /// Enum Mkd for "MKD"
            /// </summary>
            [EnumMember(Value = "MKD")]
            Mkd,
            
            /// <summary>
            /// Enum Mmk for "MMK"
            /// </summary>
            [EnumMember(Value = "MMK")]
            Mmk,
            
            /// <summary>
            /// Enum Mnt for "MNT"
            /// </summary>
            [EnumMember(Value = "MNT")]
            Mnt,
            
            /// <summary>
            /// Enum Mop for "MOP"
            /// </summary>
            [EnumMember(Value = "MOP")]
            Mop,
            
            /// <summary>
            /// Enum Mro for "MRO"
            /// </summary>
            [EnumMember(Value = "MRO")]
            Mro,
            
            /// <summary>
            /// Enum Mur for "MUR"
            /// </summary>
            [EnumMember(Value = "MUR")]
            Mur,
            
            /// <summary>
            /// Enum Mvr for "MVR"
            /// </summary>
            [EnumMember(Value = "MVR")]
            Mvr,
            
            /// <summary>
            /// Enum Mwk for "MWK"
            /// </summary>
            [EnumMember(Value = "MWK")]
            Mwk,
            
            /// <summary>
            /// Enum Mxn for "MXN"
            /// </summary>
            [EnumMember(Value = "MXN")]
            Mxn,
            
            /// <summary>
            /// Enum Mxv for "MXV"
            /// </summary>
            [EnumMember(Value = "MXV")]
            Mxv,
            
            /// <summary>
            /// Enum Myr for "MYR"
            /// </summary>
            [EnumMember(Value = "MYR")]
            Myr,
            
            /// <summary>
            /// Enum Mzn for "MZN"
            /// </summary>
            [EnumMember(Value = "MZN")]
            Mzn,
            
            /// <summary>
            /// Enum Nad for "NAD"
            /// </summary>
            [EnumMember(Value = "NAD")]
            Nad,
            
            /// <summary>
            /// Enum Ngn for "NGN"
            /// </summary>
            [EnumMember(Value = "NGN")]
            Ngn,
            
            /// <summary>
            /// Enum Nio for "NIO"
            /// </summary>
            [EnumMember(Value = "NIO")]
            Nio,
            
            /// <summary>
            /// Enum Nok for "NOK"
            /// </summary>
            [EnumMember(Value = "NOK")]
            Nok,
            
            /// <summary>
            /// Enum Npr for "NPR"
            /// </summary>
            [EnumMember(Value = "NPR")]
            Npr,
            
            /// <summary>
            /// Enum Nzd for "NZD"
            /// </summary>
            [EnumMember(Value = "NZD")]
            Nzd,
            
            /// <summary>
            /// Enum Omr for "OMR"
            /// </summary>
            [EnumMember(Value = "OMR")]
            Omr,
            
            /// <summary>
            /// Enum Pab for "PAB"
            /// </summary>
            [EnumMember(Value = "PAB")]
            Pab,
            
            /// <summary>
            /// Enum Pen for "PEN"
            /// </summary>
            [EnumMember(Value = "PEN")]
            Pen,
            
            /// <summary>
            /// Enum Pgk for "PGK"
            /// </summary>
            [EnumMember(Value = "PGK")]
            Pgk,
            
            /// <summary>
            /// Enum Php for "PHP"
            /// </summary>
            [EnumMember(Value = "PHP")]
            Php,
            
            /// <summary>
            /// Enum Pkr for "PKR"
            /// </summary>
            [EnumMember(Value = "PKR")]
            Pkr,
            
            /// <summary>
            /// Enum Pln for "PLN"
            /// </summary>
            [EnumMember(Value = "PLN")]
            Pln,
            
            /// <summary>
            /// Enum Pyg for "PYG"
            /// </summary>
            [EnumMember(Value = "PYG")]
            Pyg,
            
            /// <summary>
            /// Enum Qar for "QAR"
            /// </summary>
            [EnumMember(Value = "QAR")]
            Qar,
            
            /// <summary>
            /// Enum Ron for "RON"
            /// </summary>
            [EnumMember(Value = "RON")]
            Ron,
            
            /// <summary>
            /// Enum Rsd for "RSD"
            /// </summary>
            [EnumMember(Value = "RSD")]
            Rsd,
            
            /// <summary>
            /// Enum Rub for "RUB"
            /// </summary>
            [EnumMember(Value = "RUB")]
            Rub,
            
            /// <summary>
            /// Enum Rwf for "RWF"
            /// </summary>
            [EnumMember(Value = "RWF")]
            Rwf,
            
            /// <summary>
            /// Enum Sar for "SAR"
            /// </summary>
            [EnumMember(Value = "SAR")]
            Sar,
            
            /// <summary>
            /// Enum Sbd for "SBD"
            /// </summary>
            [EnumMember(Value = "SBD")]
            Sbd,
            
            /// <summary>
            /// Enum Scr for "SCR"
            /// </summary>
            [EnumMember(Value = "SCR")]
            Scr,
            
            /// <summary>
            /// Enum Sdg for "SDG"
            /// </summary>
            [EnumMember(Value = "SDG")]
            Sdg,
            
            /// <summary>
            /// Enum Sek for "SEK"
            /// </summary>
            [EnumMember(Value = "SEK")]
            Sek,
            
            /// <summary>
            /// Enum Sgd for "SGD"
            /// </summary>
            [EnumMember(Value = "SGD")]
            Sgd,
            
            /// <summary>
            /// Enum Shp for "SHP"
            /// </summary>
            [EnumMember(Value = "SHP")]
            Shp,
            
            /// <summary>
            /// Enum Sll for "SLL"
            /// </summary>
            [EnumMember(Value = "SLL")]
            Sll,
            
            /// <summary>
            /// Enum Sos for "SOS"
            /// </summary>
            [EnumMember(Value = "SOS")]
            Sos,
            
            /// <summary>
            /// Enum Srd for "SRD"
            /// </summary>
            [EnumMember(Value = "SRD")]
            Srd,
            
            /// <summary>
            /// Enum Ssp for "SSP"
            /// </summary>
            [EnumMember(Value = "SSP")]
            Ssp,
            
            /// <summary>
            /// Enum Std for "STD"
            /// </summary>
            [EnumMember(Value = "STD")]
            Std,
            
            /// <summary>
            /// Enum Svc for "SVC"
            /// </summary>
            [EnumMember(Value = "SVC")]
            Svc,
            
            /// <summary>
            /// Enum Syp for "SYP"
            /// </summary>
            [EnumMember(Value = "SYP")]
            Syp,
            
            /// <summary>
            /// Enum Szl for "SZL"
            /// </summary>
            [EnumMember(Value = "SZL")]
            Szl,
            
            /// <summary>
            /// Enum Thb for "THB"
            /// </summary>
            [EnumMember(Value = "THB")]
            Thb,
            
            /// <summary>
            /// Enum Tjs for "TJS"
            /// </summary>
            [EnumMember(Value = "TJS")]
            Tjs,
            
            /// <summary>
            /// Enum Tmt for "TMT"
            /// </summary>
            [EnumMember(Value = "TMT")]
            Tmt,
            
            /// <summary>
            /// Enum Tnd for "TND"
            /// </summary>
            [EnumMember(Value = "TND")]
            Tnd,
            
            /// <summary>
            /// Enum Top for "TOP"
            /// </summary>
            [EnumMember(Value = "TOP")]
            Top,
            
            /// <summary>
            /// Enum Try for "TRY"
            /// </summary>
            [EnumMember(Value = "TRY")]
            Try,
            
            /// <summary>
            /// Enum Ttd for "TTD"
            /// </summary>
            [EnumMember(Value = "TTD")]
            Ttd,
            
            /// <summary>
            /// Enum Twd for "TWD"
            /// </summary>
            [EnumMember(Value = "TWD")]
            Twd,
            
            /// <summary>
            /// Enum Tzs for "TZS"
            /// </summary>
            [EnumMember(Value = "TZS")]
            Tzs,
            
            /// <summary>
            /// Enum Uah for "UAH"
            /// </summary>
            [EnumMember(Value = "UAH")]
            Uah,
            
            /// <summary>
            /// Enum Ugx for "UGX"
            /// </summary>
            [EnumMember(Value = "UGX")]
            Ugx,
            
            /// <summary>
            /// Enum Usd for "USD"
            /// </summary>
            [EnumMember(Value = "USD")]
            Usd,
            
            /// <summary>
            /// Enum Usn for "USN"
            /// </summary>
            [EnumMember(Value = "USN")]
            Usn,
            
            /// <summary>
            /// Enum Uss for "USS"
            /// </summary>
            [EnumMember(Value = "USS")]
            Uss,
            
            /// <summary>
            /// Enum Uyi for "UYI"
            /// </summary>
            [EnumMember(Value = "UYI")]
            Uyi,
            
            /// <summary>
            /// Enum Uyu for "UYU"
            /// </summary>
            [EnumMember(Value = "UYU")]
            Uyu,
            
            /// <summary>
            /// Enum Uzs for "UZS"
            /// </summary>
            [EnumMember(Value = "UZS")]
            Uzs,
            
            /// <summary>
            /// Enum Vef for "VEF"
            /// </summary>
            [EnumMember(Value = "VEF")]
            Vef,
            
            /// <summary>
            /// Enum Vnd for "VND"
            /// </summary>
            [EnumMember(Value = "VND")]
            Vnd,
            
            /// <summary>
            /// Enum Vuv for "VUV"
            /// </summary>
            [EnumMember(Value = "VUV")]
            Vuv,
            
            /// <summary>
            /// Enum Wst for "WST"
            /// </summary>
            [EnumMember(Value = "WST")]
            Wst,
            
            /// <summary>
            /// Enum Xaf for "XAF"
            /// </summary>
            [EnumMember(Value = "XAF")]
            Xaf,
            
            /// <summary>
            /// Enum Xag for "XAG"
            /// </summary>
            [EnumMember(Value = "XAG")]
            Xag,
            
            /// <summary>
            /// Enum Xau for "XAU"
            /// </summary>
            [EnumMember(Value = "XAU")]
            Xau,
            
            /// <summary>
            /// Enum Xba for "XBA"
            /// </summary>
            [EnumMember(Value = "XBA")]
            Xba,
            
            /// <summary>
            /// Enum Xbb for "XBB"
            /// </summary>
            [EnumMember(Value = "XBB")]
            Xbb,
            
            /// <summary>
            /// Enum Xbc for "XBC"
            /// </summary>
            [EnumMember(Value = "XBC")]
            Xbc,
            
            /// <summary>
            /// Enum Xbd for "XBD"
            /// </summary>
            [EnumMember(Value = "XBD")]
            Xbd,
            
            /// <summary>
            /// Enum Xcd for "XCD"
            /// </summary>
            [EnumMember(Value = "XCD")]
            Xcd,
            
            /// <summary>
            /// Enum Xdr for "XDR"
            /// </summary>
            [EnumMember(Value = "XDR")]
            Xdr,
            
            /// <summary>
            /// Enum Xof for "XOF"
            /// </summary>
            [EnumMember(Value = "XOF")]
            Xof,
            
            /// <summary>
            /// Enum Xpd for "XPD"
            /// </summary>
            [EnumMember(Value = "XPD")]
            Xpd,
            
            /// <summary>
            /// Enum Xpf for "XPF"
            /// </summary>
            [EnumMember(Value = "XPF")]
            Xpf,
            
            /// <summary>
            /// Enum Xpt for "XPT"
            /// </summary>
            [EnumMember(Value = "XPT")]
            Xpt,
            
            /// <summary>
            /// Enum Xts for "XTS"
            /// </summary>
            [EnumMember(Value = "XTS")]
            Xts,
            
            /// <summary>
            /// Enum Xxx for "XXX"
            /// </summary>
            [EnumMember(Value = "XXX")]
            Xxx,
            
            /// <summary>
            /// Enum Yer for "YER"
            /// </summary>
            [EnumMember(Value = "YER")]
            Yer,
            
            /// <summary>
            /// Enum Zar for "ZAR"
            /// </summary>
            [EnumMember(Value = "ZAR")]
            Zar,
            
            /// <summary>
            /// Enum Zmk for "ZMK"
            /// </summary>
            [EnumMember(Value = "ZMK")]
            Zmk,
            
            /// <summary>
            /// Enum Zmw for "ZMW"
            /// </summary>
            [EnumMember(Value = "ZMW")]
            Zmw,
            
            /// <summary>
            /// Enum Btc for "BTC"
            /// </summary>
            [EnumMember(Value = "BTC")]
            Btc
        }

        /// <summary>
        /// This function is to convert the String Value to its correspoding Enum value
        /// </summary>
        public static CurrencyEnum ToCurrencyEnum (string str)
        {
            var enumType = typeof(CurrencyEnum);
            foreach (var name in Enum.GetNames(enumType))
            {
                var enumMemberAttribute = ((EnumMemberAttribute[])enumType.GetField(name).GetCustomAttributes(typeof(EnumMemberAttribute), true)).Single();
                if (enumMemberAttribute.Value == str) return (CurrencyEnum)Enum.Parse(enumType, name);
            }
            return default(CurrencyEnum);
        }

        /// <summary>
        /// This function is to convert the Enum Value to its correspoding String Value
        /// </summary>
        public static string CurrencyEnumToString(CurrencyEnum type)
        {
            var enumType = typeof(CurrencyEnum);
            var name = Enum.GetName(enumType, type);
            var enumMemberAttribute = ((EnumMemberAttribute[])enumType.GetField(name).GetCustomAttributes(typeof(EnumMemberAttribute), true)).Single();
            return enumMemberAttribute.Value;
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Money" /> class.
        /// </summary>
        /// <param name="Amount">Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a &#39;cent&#39; concept)..</param>
        /// <param name="Currency">.</param>
        public Money(int? Amount = null, CurrencyEnum? Currency = null)
        {
            this.Amount = Amount;
            this.Currency = Currency;
        }
        
        /// <summary>
        /// Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a &#39;cent&#39; concept).
        /// </summary>
        /// <value>Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a &#39;cent&#39; concept).</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Money {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Money);
        }

        /// <summary>
        /// Returns true if Money instances are equal
        /// </summary>
        /// <param name="other">Instance of Money to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Money other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                return hash;
            }
        }
    }

}
