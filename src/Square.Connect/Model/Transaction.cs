/* 
 * Square Connect API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a transaction processed with Square, either with the Connect API or with Square Register.
    /// </summary>
    [DataContract]
    public partial class Transaction :  IEquatable<Transaction>
    {
        /// <summary>
        /// The product that processed the transaction.
        /// </summary>
        /// <value>The product that processed the transaction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductEnum
        {
            
            /// <summary>
            /// Enum Register for "REGISTER"
            /// </summary>
            [EnumMember(Value = "REGISTER")]
            Register,
            
            /// <summary>
            /// Enum ExternalApi for "EXTERNAL_API"
            /// </summary>
            [EnumMember(Value = "EXTERNAL_API")]
            ExternalApi,
            
            /// <summary>
            /// Enum Billing for "BILLING"
            /// </summary>
            [EnumMember(Value = "BILLING")]
            Billing,
            
            /// <summary>
            /// Enum Appointments for "APPOINTMENTS"
            /// </summary>
            [EnumMember(Value = "APPOINTMENTS")]
            Appointments,
            
            /// <summary>
            /// Enum Invoices for "INVOICES"
            /// </summary>
            [EnumMember(Value = "INVOICES")]
            Invoices,
            
            /// <summary>
            /// Enum OnlineStore for "ONLINE_STORE"
            /// </summary>
            [EnumMember(Value = "ONLINE_STORE")]
            OnlineStore,
            
            /// <summary>
            /// Enum Payroll for "PAYROLL"
            /// </summary>
            [EnumMember(Value = "PAYROLL")]
            Payroll,
            
            /// <summary>
            /// Enum Other for "OTHER"
            /// </summary>
            [EnumMember(Value = "OTHER")]
            Other
        }

        /// <summary>
        /// This function is to convert the String Value to its correspoding Enum value
        /// </summary>
        public static ProductEnum ToProductEnum (string str)
        {
            var enumType = typeof(ProductEnum);
            foreach (var name in Enum.GetNames(enumType))
            {
                var enumMemberAttribute = ((EnumMemberAttribute[])enumType.GetField(name).GetCustomAttributes(typeof(EnumMemberAttribute), true)).Single();
                if (enumMemberAttribute.Value == str) return (ProductEnum)Enum.Parse(enumType, name);
            }
            return default(ProductEnum);
        }

        /// <summary>
        /// This function is to convert the Enum Value to its correspoding String Value
        /// </summary>
        public static string ProductEnumToString(ProductEnum type)
        {
            var enumType = typeof(ProductEnum);
            var name = Enum.GetName(enumType, type);
            var enumMemberAttribute = ((EnumMemberAttribute[])enumType.GetField(name).GetCustomAttributes(typeof(EnumMemberAttribute), true)).Single();
            return enumMemberAttribute.Value;
            
        }

        /// <summary>
        /// The product that processed the transaction.
        /// </summary>
        /// <value>The product that processed the transaction.</value>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public ProductEnum? Product { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="Id">The transaction&#39;s unique ID..</param>
        /// <param name="LocationId">The ID of the transaction&#39;s associated location..</param>
        /// <param name="CreatedAt">The time when the transaction was created, in RFC 3339 format..</param>
        /// <param name="Tenders">Descriptions of the tenders used to pay for the transaction..</param>
        /// <param name="Refunds">An array of any refunds associated with the transaction..</param>
        /// <param name="ReferenceId">If the transaction was created with the **Charge** endpoint, this value is the same as the value provided as the &#x60;reference_id&#x60; parameter in the request to that endpoint..</param>
        /// <param name="Product">The product that processed the transaction..</param>
        public Transaction(string Id = null, string LocationId = null, string CreatedAt = null, List<Tender> Tenders = null, List<Refund> Refunds = null, string ReferenceId = null, ProductEnum? Product = null)
        {
            this.Id = Id;
            this.LocationId = LocationId;
            this.CreatedAt = CreatedAt;
            this.Tenders = Tenders;
            this.Refunds = Refunds;
            this.ReferenceId = ReferenceId;
            this.Product = Product;
        }
        
        /// <summary>
        /// The transaction&#39;s unique ID.
        /// </summary>
        /// <value>The transaction&#39;s unique ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The ID of the transaction&#39;s associated location.
        /// </summary>
        /// <value>The ID of the transaction&#39;s associated location.</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public string LocationId { get; set; }
        /// <summary>
        /// The time when the transaction was created, in RFC 3339 format.
        /// </summary>
        /// <value>The time when the transaction was created, in RFC 3339 format.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Descriptions of the tenders used to pay for the transaction.
        /// </summary>
        /// <value>Descriptions of the tenders used to pay for the transaction.</value>
        [DataMember(Name="tenders", EmitDefaultValue=false)]
        public List<Tender> Tenders { get; set; }
        /// <summary>
        /// An array of any refunds associated with the transaction.
        /// </summary>
        /// <value>An array of any refunds associated with the transaction.</value>
        [DataMember(Name="refunds", EmitDefaultValue=false)]
        public List<Refund> Refunds { get; set; }
        /// <summary>
        /// If the transaction was created with the **Charge** endpoint, this value is the same as the value provided as the &#x60;reference_id&#x60; parameter in the request to that endpoint.
        /// </summary>
        /// <value>If the transaction was created with the **Charge** endpoint, this value is the same as the value provided as the &#x60;reference_id&#x60; parameter in the request to that endpoint.</value>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Tenders: ").Append(Tenders).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="other">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LocationId == other.LocationId ||
                    this.LocationId != null &&
                    this.LocationId.Equals(other.LocationId)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Tenders == other.Tenders ||
                    this.Tenders != null &&
                    this.Tenders.SequenceEqual(other.Tenders)
                ) && 
                (
                    this.Refunds == other.Refunds ||
                    this.Refunds != null &&
                    this.Refunds.SequenceEqual(other.Refunds)
                ) && 
                (
                    this.ReferenceId == other.ReferenceId ||
                    this.ReferenceId != null &&
                    this.ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    this.Product == other.Product ||
                    this.Product != null &&
                    this.Product.Equals(other.Product)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LocationId != null)
                    hash = hash * 59 + this.LocationId.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Tenders != null)
                    hash = hash * 59 + this.Tenders.GetHashCode();
                if (this.Refunds != null)
                    hash = hash * 59 + this.Refunds.GetHashCode();
                if (this.ReferenceId != null)
                    hash = hash * 59 + this.ReferenceId.GetHashCode();
                if (this.Product != null)
                    hash = hash * 59 + this.Product.GetHashCode();
                return hash;
            }
        }
    }

}
